(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    390823,       7662]
NotebookOptionsPosition[    375827,       7459]
NotebookOutlinePosition[    376830,       7491]
CellTagsIndexPosition[    376787,       7488]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[TextData[{
 StyleBox["Machine Learning for event detection in Physiological Signals",
  FontColor->RGBColor[0., 0.5019607843137255, 0.]],
 "\n",
 StyleBox["Course:\t\t", "Chapter",
  FontFamily->"Calibri Light",
  FontSize->28,
  FontWeight->"Bold",
  FontColor->RGBColor[0., 0.5019607843137255, 0.]],
 StyleBox["ACM40730: Mathematica for Research", "Chapter",
  FontFamily->"Calibri Light",
  FontSize->28,
  FontWeight->"Bold",
  FontColor->RGBColor[0.5, 0, 0.5]],
 StyleBox[" \nSubmitted by: ", "Chapter",
  FontFamily->"Calibri Light",
  FontSize->28,
  FontWeight->"Bold",
  FontColor->RGBColor[0., 0.5019607843137255, 0.]],
 StyleBox["\t\t", "Chapter",
  FontFamily->"Calibri Light",
  FontSize->28,
  FontWeight->"Bold"],
 StyleBox["Arlene John ", "Chapter",
  FontFamily->"Calibri Light",
  FontSize->28,
  FontWeight->"Bold",
  FontColor->RGBColor[0.5, 0, 0.5]],
 StyleBox["\n", "Chapter",
  FontFamily->"Calibri Light",
  FontSize->28,
  FontWeight->"Bold"],
 StyleBox["Submission date:", "Chapter",
  FontFamily->"Calibri Light",
  FontSize->28,
  FontWeight->"Bold",
  FontColor->RGBColor[0., 0.5019607843137255, 0.]],
 StyleBox["\t", "Chapter",
  FontFamily->"Calibri Light",
  FontSize->28,
  FontWeight->"Bold"],
 StyleBox["02/12/2018", "Chapter",
  FontFamily->"Calibri Light",
  FontSize->28,
  FontWeight->"Bold",
  FontColor->RGBColor[0.5, 0, 0.5]]
}], "Title",
 CellChangeTimes->{
  3.7527743568111897`*^9, {3.7527749240327396`*^9, 3.752774982667974*^9}, {
   3.7527751031473246`*^9, 3.7527751189675674`*^9}, 3.7527826322749057`*^9, {
   3.7527829925543857`*^9, 3.7527830196515217`*^9}, 3.816863020838566*^9},
 TextAlignment->Left,ExpressionUUID->"efeea883-35c4-4b1a-9b54-923a13693dd5"],

Cell[CellGroupData[{

Cell["Introduction", "Section",
 CellChangeTimes->{{3.7527751306852474`*^9, 3.7527751331752853`*^9}, 
   3.752775550179597*^9, {3.752775658916267*^9, 3.752775659361274*^9}, {
   3.752775790223284*^9, 3.752775843166597*^9}, {3.752776128015972*^9, 
   3.752776133443556*^9}},ExpressionUUID->"fedb9b32-8807-46ef-ae30-\
ee51c0f5a3ad"],

Cell[CellGroupData[{

Cell["Aim", "Subsection",
 CellChangeTimes->{{3.752776142573696*^9, 
  3.7527761431562047`*^9}},ExpressionUUID->"96e29293-babb-42e8-9910-\
1dd74d057cd2"],

Cell["\<\
The project aims to check the feasibility of transforming event detection \
problems to classification problems that can be solved using supervised \
machine learning algorithms. The detection of events in physiological signals \
is traditionally carried out using signal processing methods such as \
filtering, differentiation, peak detection, etc. Event detection is of high \
importance in scenarios where the exact time instant at which an event occurs \
needs to be recorded for further inference. For example, in the case of heart \
rate detection using Electrocardiogram (ECG are electrical signals recording \
cardiac activity and contains 5 waves namely P, Q, R, S, and T) the exact \
time instant of occurrence of two consecutive R peaks needs to be detected \
for calculating heart rate.

Supervised learning is the machine learning task of learning a function that \
maps an input to an output based on example input-output pairs. It infers a \
function from labeled training data consisting of a set of training examples. \
In supervised learning, each example is a pair consisting of an input object \
(typically a list of predictors) and the desired output value (called the \
supervisory signal, classes, or labels). 

Usually, signals on which event detection methods are carried out are 1 \
Dimensional such as physiological signals Electrocardiogram, Electromyogram, \
Speech, etc. Traditionally these signals are windowed and certain features \
are extracted from these signals to act as predictors for supervised machine \
learning algorithms. But, it is a common observation that extracting features \
from a window of signals would reduce time resolution of the predicted output \
leading to information loss (exact time of event occurrence is not \
available), difficulty to decide the most suitable features and loss in the \
spatial-temporal structure of the signal. In this project, I intend to \
propose a novel method of choosing features based on sample points from the \
neighboring samples. Data preparation is discussed in the next section.\
\>", "Text",
 CellChangeTimes->{{3.7527758514542246`*^9, 3.7527761081656675`*^9}, {
   3.752776255673729*^9, 3.752776595476196*^9}, 
   3.8168625126122704`*^9},ExpressionUUID->"5878b5b9-c8bb-49bc-94b9-\
0041fb52fe90"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Data Preparation", "Subsection",
 CellChangeTimes->{{3.7527761972945366`*^9, 
  3.7527762011620955`*^9}},ExpressionUUID->"8fb96e59-2c4d-405d-a4f0-\
4b00093a6f89"],

Cell[TextData[{
 "Data is prepared by using data frames centered around the sample point of \
interest ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["n", "k"], TraditionalForm]],ExpressionUUID->
  "ae37fb54-8794-4abf-a06c-b40ac0527b69"],
 " and stacking them. When ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["n", "0"], TraditionalForm]],ExpressionUUID->
  "3c8ba22f-8996-4472-b1a9-a8ba9fe366be"],
 " is the sample point of interest, zeros are prepended to it. The Figure \
below explains the data preparation process of which the frame size is 2M+1:\n\
",
 Cell[BoxData[
  GraphicsBox[
   TagBox[RasterBox[CompressedData["
1:eJztvXlUFVe6/93rff/53bvWXeveXp30ukknJtpmNnGiY4xxHmhnnBEVheA8
ACogiiOKE4IjOIGogCJhUkQmQURkkhkaAiIOgIqMKoNGfL/v2avrrRcQFU7V
Qfx+VsI61qlT9dTeu/bz2TV+brJi0vz/609/+tPK/4M/k+ZZD7G0nLdm8n/j
H1OXr1y0YLnZr/9cvspsgZllP5P/GxNv4v9qzP//fn5JCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIec+wsrL6
U0v89a9/jY6O1nV0hLzbJCcn6+nptbiLGRsb5+Xl6TpAQgjpPKxYseI///M/
+/XrN2XKlGnTpk3VMHHixCVLlvzrX//SdXSEvNvcunVr48aN2Kewf4mda/bs
2aNGjfqf//mf6dOn5+bm6jpAQgjpPCxYsOCjjz6yt7ePjY2Nj4+/ruHKlSsp
KSk1NTW6jo6Qd5unT59iaIB9Ki4uTuxc6enpZ86c+eqrr8aPH89RAyGEaJFf
f/21W7duPj4+9fX1f/zxx3MNz549w+fGxkZdR0fIuw12ohcvXjyXgX/m5OTo
6en985//pNIQQogWgdJ07949KChI14EQ8r5QVFTUr18/fX19Kg0hhGgRKM3f
//7333777Y8//tB1LIS8F/z+++//+Mc/eJSGEEK0C5WGEJWh0hBCiBJQaQhR
GSoNIYQoAZWGEJWh0hBCiBJQaQhRGSoNIYQoAZWGEJXRitI0Njb6+PiMHTu2
R48e3333XZ8+fRYtWhQaGlpVVaXFUAkhnR5k/6ioKHNz88GDB3///fd6enqj
Ro2aMWOGruNqC2+rNKWlpUlJSTExMYmJiWVlZXV1dTk5OdevX4+MjMRCMPHx
48dKx/yeUF5enpqaiqJG8ZaUlNTX1xcUFOBzdHQ0ivrq1auVlZW6jrEjcv/+
/Q7eRLWiNC9evPDy8po5c+aSJUv27Nmzd+9ePz+/vLw8bK8WQyWEdHrQmdy8
eTMoKMjV1dXJycnR0RHjI1iNruNqC2+lNJgnISHBw8MD/aelpeWRI0fS09Mj
IiLOnj2Loli2bJmNjQ3+ieTb5nhQto8ePcrOzkY2f/DgQYvzVFRUZGVlYdVI
9A0NDW1eVwcnMzPT09Pz0KFDq1atQs5KSUlBmkZRu7u7W2gIDAysrq6W/+Tp
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
ypQp+fn5uo6FEEI6D+vXrx89enRUVJSuAyHkfaGoqGj69OmLFi26e/eurmMh
hJDOg6WlZf/+/UNCQniUhhB1uHnz5j//+U8jI6PCwkJdx0IIIZ0HExOTrl27
+vr68loaQtTh999/79u376hRo3gtDSGEaBFTU9Nu3bqpqTSNjY0NGvBBnTVq
l+fPn9fX13cEA0QMiATx6DqQly9evEAkz54903Ugb41OIofS6Onp6evr844n
QgjRIurfxP3w4cNz5855e3uXlZWps0YtgtyXkJBw7NixxMRE3UaC+srKyjp+
/Hh0dLRuTxpCTQsLC0+ePBkcHFxXV6fDSN4WRH7r1i1Efv78+draWtXWy5u4
CSFECdRXGiTiqVOnjhw5Mj4+/p07UPPkyZO9e/f27dt3x44daibB5jQ0NEAL
f/zxx1WrVpWXl+swErSc8PDwwYMHGxsb3759W4eRvC2IPCIiYujQobNnz4bb
qLZeKg0hhCiB+kqTk5MzZ86csWPHRkdHd4TTN2/F48ePXVxcBg4c6ODgUFFR
ocNIoDS+vr5Ix1Cae/fu6TCS58+fX758ecyYMSYmJrm5uTqM5G1B84uKikJT
hIypaRdUGkIIUQL1laampiYlJSU+Pr6srOydO0qD9I3hfGxsbF5eHqRCh5G8
ePGipKTk2rVrWVlZuj1ehEpEVaJCUa2oXB1G8rYg8kePHiUkJNy4caO6ulq1
9VJpCCFECfhCBEJUhkpDCCFKQKUhRGWoNIQQogRUGkJUhkpDCCFKQKUhRGWo
NIQQogRUGkJUhkpDCCFKQKUhRGWoNIQQogRUGkJUhkpDCCFKQKUhRGWoNIQQ
ogRUGkJUhkpDCCFKQKUhRGWoNIQQogRUGkJUhkpDCCFKQKUhRGWoNIQQogRU
GkJUhkpDCCFKQKUhRGWoNIQQogRUGkJUhkpDCCFKQKUhRGWoNIQQogRUGkJU
hkpDCCFKQKUhRGWoNIQQogSvVZoXL17gK/yV//O5BmkiUYLGxkZR2vggprDw
XzZrkCicPzSgTN4VLafSEEKIErSuNA8ePIiNjQ0KCrpw4UJOTs6TJ0/wNzQ0
FFNcXV19fX3v3r373uZWpSktLY2JiUFRBwcH5+XlofAzMzNR+IGBgS4uLgEB
AZjhfSv86urq5ORktEYUQlJSUk1Nze3bt8PDw0NCQo4fP+7h4ZGbm/vs2TNd
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
IYQQQgghhBBCCFGO/wfrco4H
     "], {{0, 221}, {753, 0}}, {0, 255},
     ColorFunction->RGBColor],
    BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
    Selectable->False],
   DefaultBaseStyle->"ImageGraphics",
   ImageSize->{693., Automatic},
   ImageSizeRaw->{753, 221},
   PlotRange->{{0, 753}, {0, 221}}]], "Input",ExpressionUUID->
  "a1a6234a-6ce0-4ab7-98af-d9bbb8640208"],
 "\nAll sample points within a frame act as the vectors/predictors describing \
the sample point of interest in the ",
 Cell[BoxData[
  FormBox[
   RowBox[{"2", "M"}], TraditionalForm]],ExpressionUUID->
  "5c224e8c-84a0-4f60-9da5-b183caf57528"],
 "+1 dimensional space.\nThe function for stacking data and labels are called \
",
 StyleBox["stackdata",
  FontSlant->"Italic"],
 " in this notebook and the code is provided below (Please execute now for \
smooth execution later on)."
}], "Text",
 CellChangeTimes->{{3.752776623866272*^9, 3.7527766764339323`*^9}, {
  3.7527767189376*^9, 3.752776803813453*^9}, {3.7527769191823273`*^9, 
  3.7527770870471683`*^9}, {3.752777367619839*^9, 
  3.752777372339551*^9}},ExpressionUUID->"b25beb81-a560-4561-bdd3-\
dcde54f68e22"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"stackdata", "[", 
    RowBox[{"signal_", ",", "stacklength_"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "stackedsigdata", ",", "i", ",", "signalappended", ",", "setval"}], 
      "}"}], ",", 
     RowBox[{"(*", 
      RowBox[{
      "signal", " ", "is", " ", "the", " ", "signal", " ", "and", " ", 
       "stacklength", " ", "is", " ", "length", " ", "of", " ", "data", " ", 
       "frame", " ", "desired"}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"stackedsigdata", "=", 
       RowBox[{"ConstantArray", "[", 
        RowBox[{"0", ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"Dimensions", "[", "signal", "]"}], "[", 
             RowBox[{"[", "1", "]"}], "]"}], "+", "1"}], ",", "stacklength"}],
           "}"}]}], "]"}]}], ";", 
      RowBox[{"(*", 
       RowBox[{"creating", " ", "a", " ", "constant", " ", "array"}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"signalappended", "=", 
       RowBox[{"ArrayPad", "[", 
        RowBox[{"signal", ",", 
         RowBox[{"Floor", "[", 
          RowBox[{"stacklength", "/", "2"}], "]"}]}], "]"}]}], ";", 
      RowBox[{"(*", 
       RowBox[{
       "prepending", " ", "and", " ", "appending", " ", "zeros", " ", "to", 
        " ", "the", " ", "datastack", " ", "so", " ", "that", " ", "the", " ",
         "first", " ", "frame", " ", "will", " ", "have", " ", "0", "s", " ", 
        "prepended", " ", "to", " ", "the", " ", "first", " ", "element", " ",
         "in", " ", "middle", " ", "position", " ", "and", " ", "last", " ", 
        "frame", " ", "will", " ", "have", " ", "0", "s", " ", "appended", 
        " ", "to", " ", "the", " ", "last", " ", "element", " ", "in", " ", 
        "middle", " ", "position"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"For", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"i", "=", 
          RowBox[{
           RowBox[{"Floor", "[", 
            RowBox[{"stacklength", "/", "2"}], "]"}], "+", "1"}]}], ";", 
         RowBox[{"setval", "=", "0"}]}], ",", 
        RowBox[{"i", "\[LessEqual]", 
         RowBox[{
          RowBox[{"Length", "[", "signalappended", "]"}], "-", 
          RowBox[{"Floor", "[", 
           RowBox[{"stacklength", "/", "2"}], "]"}]}]}], ",", 
        RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"stackedsigdata", "[", 
          RowBox[{"[", 
           RowBox[{"i", "-", 
            RowBox[{"Floor", "[", 
             RowBox[{"stacklength", "/", "2"}], "]"}], "+", "1"}], "]"}], 
          "]"}], "=", 
         RowBox[{"signalappended", "[", 
          RowBox[{"[", 
           RowBox[{
            RowBox[{"i", "-", 
             RowBox[{"Floor", "[", 
              RowBox[{"stacklength", "/", "2"}], "]"}]}], ";;", 
            RowBox[{"i", "+", 
             RowBox[{"Floor", "[", 
              RowBox[{"stacklength", "/", "2"}], "]"}]}]}], "]"}], "]"}]}]}], 
       "]"}], ";", " ", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{
        "maintains", " ", "first", " ", "row", " ", "as", " ", "frame", " ", 
         "of", " ", "0", "s"}], ",", " ", 
        RowBox[{
        "starts", " ", "assigning", " ", "values", " ", "from", " ", "second",
          " ", "row"}]}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "stackedsigdata", "]"}], ";"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.752330740892593*^9, 3.7523307431933975`*^9}, {
   3.7523307916331973`*^9, 3.7523308212662587`*^9}, {3.7523308523496237`*^9, 
   3.752330975270271*^9}, {3.752331189488207*^9, 3.7523312363156033`*^9}, {
   3.7523326976632338`*^9, 3.75233271637427*^9}, {3.7523327474149323`*^9, 
   3.752332764231969*^9}, {3.7523331049277725`*^9, 3.7523331130757904`*^9}, {
   3.7523331525462694`*^9, 3.752333171063507*^9}, 3.7523332848866467`*^9, {
   3.7523333339773426`*^9, 3.7523333347667446`*^9}, {3.752341126605318*^9, 
   3.752341134454541*^9}, {3.752341194824337*^9, 3.752341263108554*^9}, {
   3.7523413532454224`*^9, 3.752341518215933*^9}, {3.7523415651116714`*^9, 
   3.7523415663892746`*^9}, 3.7523416314603167`*^9, 3.752341661883845*^9, {
   3.7523417170832167`*^9, 3.7523417471489697`*^9}, {3.752341803882955*^9, 
   3.752341819506811*^9}, {3.7523447251511536`*^9, 3.7523447683336535`*^9}, {
   3.752344806686186*^9, 3.752344979743983*^9}, {3.7523450173599696`*^9, 
   3.752345049951845*^9}, 3.752345088402733*^9, {3.7523451892028646`*^9, 
   3.752345205740603*^9}, {3.75235530970652*^9, 3.752355333981676*^9}, {
   3.752772872815814*^9, 3.752772874083223*^9}, {3.7527771474340515`*^9, 
   3.752777283486471*^9}, {3.752777400445848*^9, 3.7527774274946394`*^9}, {
   3.752777477063384*^9, 3.7527774969773474`*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"988f6582-41f2-409c-a0a8-7db71609c10e"],

Cell[TextData[{
 "Once the data is stacked, frames with irrelevant information (more zeros \
than actual values) need to be deleted. For this, a function called ",
 StyleBox["deleting",
  FontSlant->"Italic"],
 " is defined (Please execute now for smooth execution later on)."
}], "Text",
 CellChangeTimes->{{3.752777111986251*^9, 3.752777133761814*^9}, {
   3.7527772975673084`*^9, 3.7527773899472046`*^9}, 3.7527774389600754`*^9, {
   3.7527786715238657`*^9, 
   3.7527786730859704`*^9}},ExpressionUUID->"d9ad6a71-ad95-4007-8868-\
77777f250681"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"deleting", "[", 
    RowBox[{"Datalongstack1_", ",", "label1_"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"j", "=", "2"}], ",", "i", ",", 
       RowBox[{"Datalongstack", "=", "Datalongstack1"}], ",", 
       RowBox[{"label", "=", "label1"}], ",", "Data", ",", "count"}], "}"}], 
     ",", 
     RowBox[{"(*", 
      RowBox[{
      "Datalongstack1", " ", "is", " ", "the", " ", "data", " ", "frame", " ",
        "stack", " ", "obtained", " ", "from", " ", "stackdata", " ", "and", 
       " ", "labels", " ", "are", " ", "the", " ", "class", " ", "labels", 
       " ", "which", " ", "will", " ", "be", " ", "discussed", " ", "in", " ",
        "next", " ", "section"}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Data", "=", 
       RowBox[{"ConstantArray", "[", 
        RowBox[{"0", ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"Dimensions", "[", "Datalongstack", "]"}], "[", 
            RowBox[{"[", "1", "]"}], "]"}], ",", 
           RowBox[{
            RowBox[{
             RowBox[{"Dimensions", "[", "Datalongstack", "]"}], "[", 
             RowBox[{"[", "2", "]"}], "]"}], "+", "1"}]}], "}"}]}], "]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"For", "[", " ", 
       RowBox[{
        RowBox[{"i", "=", "2"}], ",", 
        RowBox[{"i", "<=", 
         RowBox[{"Length", "[", "Datalongstack", "]"}]}], ",", 
        RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"count", "=", 
          RowBox[{"Count", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Datalongstack", "[", 
              RowBox[{"[", "i", "]"}], "]"}], "[", 
             RowBox[{"[", "All", "]"}], "]"}], ",", 
            RowBox[{"x_", "/;", 
             RowBox[{"x", "==", "0"}]}]}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"count", "<", "36"}], ",", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"Data", "[", 
               RowBox[{"[", "j", "]"}], "]"}], "[", 
              RowBox[{"[", 
               RowBox[{"1", ";;", 
                RowBox[{"-", "2"}]}], "]"}], "]"}], "=", 
             RowBox[{
              RowBox[{"Datalongstack", "[", 
               RowBox[{"[", "i", "]"}], "]"}], "[", 
              RowBox[{"[", "All", "]"}], "]"}]}], ";", 
            RowBox[{
             RowBox[{
              RowBox[{"Data", "[", 
               RowBox[{"[", "j", "]"}], "]"}], "[", 
              RowBox[{"[", 
               RowBox[{"-", "1"}], "]"}], "]"}], "=", 
             RowBox[{"label", "[", 
              RowBox[{"[", "i", "]"}], "]"}]}], ";", 
            RowBox[{"j", "++"}]}], ",", "Null"}], "]"}], ";"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Data", "=", 
       RowBox[{"Drop", "[", 
        RowBox[{"Data", ",", 
         RowBox[{"{", 
          RowBox[{"j", ",", 
           RowBox[{"-", "1"}]}], "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "Data", "]"}], ";"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7527555441161995`*^9, 3.752755716696006*^9}, {
   3.7527572488630185`*^9, 3.752757252363428*^9}, 3.752757392246065*^9, {
   3.752757459344431*^9, 3.7527574610899353`*^9}, {3.7527576199555244`*^9, 
   3.7527576210232267`*^9}, 3.752757766875182*^9, {3.7527580912273436`*^9, 
   3.7527581727969356`*^9}, {3.7527584870462866`*^9, 
   3.7527584958518095`*^9}, {3.7527585510530453`*^9, 3.752758568218187*^9}, {
   3.75275918443556*^9, 3.752759184819361*^9}, 3.752759300520337*^9, {
   3.7527775050814734`*^9, 3.7527775554530277`*^9}, 3.752777588216631*^9},
 CellLabel->"In[2]:=",ExpressionUUID->"e7f8df79-dd5b-4f51-9739-a26d3ae43988"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Classes/labels preparation", "Subsection",
 CellChangeTimes->{{3.752777577172794*^9, 
  3.752777584926915*^9}},ExpressionUUID->"b7374c39-f1b7-4baa-96af-\
5d772c48a95a"],

Cell[TextData[{
 "The list of classes are made by assigning a value of 1 to the frame \
position ",
 StyleBox["k",
  FontSlant->"Italic"],
 " if event occurs at point ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["n", 
    RowBox[{"k", " "}]], TraditionalForm]],ExpressionUUID->
  "0adf0add-778f-4a3e-b15e-e62dc0883575"],
 "at which that corresponding frame is centered. This is discussed in the \
figure below. Raw data labels have a label value of 1 at the time instant of \
occurrence of event.\n",
 Cell[BoxData[
  GraphicsBox[
   TagBox[RasterBox[CompressedData["
1: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
     "], {{0, 218}, {801, 0}}, {0, 255},
     ColorFunction->RGBColor],
    BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
    Selectable->False],
   DefaultBaseStyle->"ImageGraphics",
   ImageSize->{749.1818181818182, Automatic},
   ImageSizeRaw->{801, 218},
   PlotRange->{{0, 801}, {0, 218}}]], "Input",ExpressionUUID->
  "8cdeb3b9-aa4a-46b9-bc8e-07fd4a036724"],
 "\n"
}], "Text",
 CellChangeTimes->{{3.752777604988879*^9, 
  3.752777737675292*^9}},ExpressionUUID->"5eb3e897-8cfc-4195-9664-\
5e00d790c0c1"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Problem selected", "Subsection",
 CellChangeTimes->{{3.7527777846818476`*^9, 
  3.7527777882875614`*^9}},ExpressionUUID->"f51011b5-ab07-492f-b82c-\
364ee23667f0"],

Cell[TextData[{
 "The problem chosen for checking the feasibility of the proposed method of \
solving event detection problems by transforming them into classification \
problems is that of calculating heart beat rate (a.k.a heartrate) from \
cardiac activity signals such as ECG and PPG signals. The simplest method for \
detecting heartrate is to detect a repetitive event that occurs per \
heartbeat. For this problem, I have taken data from the MIMIC III Clinical \
database (",
 ButtonBox["https://physionet.org/physiobank/database/mimic3cdb/",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://physionet.org/physiobank/database/mimic3cdb/"], None},
  ButtonNote->"https://physionet.org/physiobank/database/mimic3cdb/"],
 ") made available by Physiobank. As all data cannot be shared, relevant data \
has been extracted and converted to .mat files for demonstration in this \
project."
}], "Text",
 CellChangeTimes->{{3.7527777994471006`*^9, 3.752778041943842*^9}, {
  3.752778081769703*^9, 
  3.752778110124199*^9}},ExpressionUUID->"3e40489b-fc34-4b9e-85d0-\
185c9527c9ae"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Heart Rate detection from PhotoPlethysmogram (PPG) signals", "Section",
 CellChangeTimes->{{3.752778156100665*^9, 
  3.7527781945801783`*^9}},ExpressionUUID->"c9bb8fb3-75a6-438b-90dd-\
0228c0fabe02"],

Cell[TextData[{
 StyleBox["The steps that follow involve importing data from your PC. The \
required data is provided in the data.zip folder file, Make changes in the \
file location accordingly for smooth execution.",
  FontWeight->"Bold",
  FontColor->RGBColor[1, 0, 0]],
 "\nPhotoplethysmogram (PPG) is an optically obtained plethysmogram, a \
volumetric measurement of an organ. A PPG is often obtained by using a pulse \
oximeter which illuminates the skin and measures changes in light absorption. \
As heart pumps blood to the periphery per cardiac cycle,  the arteries and \
arterioles in the subcutaneous tissue distend. If the pulse oximeter is \
attached without compressing the skin, a pressure pulse can be seen as shown \
in figure below. From the occurrence of various peaks in the PPG signal, we \
can exactly match the time of systole and diastole."
}], "Text",
 CellChangeTimes->{{3.752778235372159*^9, 3.7527783704696913`*^9}, 
   3.7527803206265745`*^9, {3.752783217763749*^9, 3.7527832829823046`*^9}, {
   3.752783365374797*^9, 3.752783367771412*^9}, {3.8168630305665507`*^9, 
   3.8168630351343355`*^9}},ExpressionUUID->"01cdf2eb-8fd0-4cb4-81da-\
1ed16ce85b83"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
JmGfK5oKzQJa0bAvjHOS+HOQZxDvuAdW1kD+L9HybVrtzg8o6XpN2cnDH733
/i3+bfYdKVMZ9yStkVAJwtMOaqT26NotLi7B6ZJYfk72AMSG8BAVlfTBPfVq
XlDM2pc/UynPAH2pwwULliWGtV498D4oO8oA0WNlRBGsbvjGiKiI7+dBeMK6
mYnFsn5ZLZ9d8IL3eKAgODq578OrjpSSQm9Vs+xP8j+FUziI3WUFRP4ajbQV
jftMaxmb0vuBJW6Vl5D9qWd2CYhO13/HIWgdPSc8dlbREXDxkKkAROCVe/zV
xt1taduXEHw709U6YX7c4PUFB6j5rXLFeFnOLHiJtu3YPnDYgB6D3sUeYouO
mzvd99/I6N70j6r3EQ7aBaY7FdWuIYyB0vJFif/68AN8RUjRu6wunzXpOj8/
/1YdqnSoqjjcJvyWK667ZfZv67795Kv/veL6cWPfccqQkr7ar5nfa2+9ib9c
+5Cw65s3PV55olyu7NSl8/U33DzttyVugMy87VgdMq4Vxv+piHncZBYD2yk+
3nyegKizqDIpnCs6CKFxRbfemfH7cfq5+AOwkk8l459+/3kKOJwCEE3IYi0h
yO3Garnrw4dvjcn5fNpxBwjMQpxownAGhc9IPXcrIPJbQDGzkzo47NVFRbmP
PDy8W0L3g7uP2O6KDAuL+OCTr0g4Vnft21cU17Vz34FDenS6d/XSlQpybN2R
1yWmw7XNr/QPbDf+tQ/xAQ8e2PPQ8CEjhg+Njo9btCQJdGl7QW5gy9Bx419N
T0+9p+e9LcNv+2HaHHKyqtYQgMh8VkSKYR59MTs0Nvmtr0jRnVlUwwBx0L1Q
frgOQBR10brwz0ElY6S+mwNBtsXTF5a5dbhsIp9NULUM9z20Lzg666upNdUK
v1D1AqLYwGqtSkhN1eiw4OBOKX0eWlsjcU/zspxZLIA4LzxuZtFRAxCRYDQ5
DRCp2jOGQzFldfAUdB++snXnZZ9PozEW+obLOcSzCtI5+1e1DoExBYHR21Jy
oFffkfSPik+AyDqSsNZ3LFs068WxTy9evHTV2vRJM+Zv3rTt5J5NLf521Q23
BhW7NV2rvLt9+K1Bd65J2X5i/7Fr/Zq98tI71ENc1fzKJl/893uXUx37xKi/
XX9lqf3EKeepzvd0Cwxps/9oOSuqcUoUucQsNq5dLdUnuuaDh8tOAWkegEgQ
Fltgy9LB35bVKiHr4GFB2eJ0QGrGVAKIP4OjhpVuGs6aqEIhZesYEEe+Unar
bf3oCYXl1DwgBoPOqd6QEerkgGgEPEVxqamIBCCSl2nTpv3YtInfP//esnN8
j/fffq99+/avT3i/rNo5YcKEuzveNXdJUo3L+fa4FyNa+lc4yVy7l5979ko/
v5zcTRV2+fP//LdLly5LFs6vqa4c+sDDPe+/D7nKvvvi47/ddOvIkWP6D+j1
1Ogn/JpcP3nWYrYsKi06vdCAiGRyY2N76fHXcoOi1r31H3ByIkfsZjtEyJR6
iLJkAUQkKv8tU8XpbiSDhudA+27rfppbLkyRy1KvYJ3pQHDPgwcDonKmL1Dd
CJxuCyASsdTV6IaGxttDVY0yXvK8jAHx61nQMnJZzwdSMbBiw+ayi3JWOR0Q
3SYgqvUCooijcjMQCAPtuHc3h9jWjXnHVYMtd0kXt8llOZNowj0pV6ClLbtF
x4K0fOjTnwKi7pOHqMs0jufati37zvbBVzbz8/Nr6ud3VURbm5uwr9UM79fj
qr/dXLhnj6O6ODzEv9t9I8oxkji14H/e8tyYcRjmFiQtDA0Pyyvcjr/Zgjmz
r73S70jx3kOnDsZ17vLAw6OwdrQrsKlotyQjxu2m4VtPU/A/yIxdsVV0s4zS
y+9vBURE/UxdZeyO73+979aOyaPecFY7KH8OMKaaTAqIE8FZJfg4zHJRSXEy
VV/jgJf/VRkSu3LsBwdLNTp8AXtCipOx1pl9RrUB0bLziXiGTHVt+bKkq67E
kNj8p+8nr1+d3KZNm5Vr12Vk511z/d+//mGyU5cd7qp3X3rlf6+97sCxA5WS
vUP7u69qckV1VUXGhsz/uyVgztyF2L+WJNeSpatycvLw+Qwf3Ov66//Z9rbo
gwd2T5n607U3++fvOMwCmchoY/RevPAQaZlPiQKj3twUYlvz1ucq6dzU6JQE
DIgLkxLDw2gO8QSIUexW+DMAkcyAU/EyS04Ffp4DIZELh49Zc9IJl+vOzyx4
6bD+7DLiYGBM3teTS7A5QafzGRWkKg8cGRhpAqKiGQF78rykKPD9LGjbeeW9
I7KKncSkvAyIZ5U6AVEYfsjoW9GtbzAuh3gBqTVFsHCd5n/HmvgBu9I2Uw4t
BJf7QM8qutDfVSoExOSExBcmZ0P/gSO5c+Q9IJJR76CeKjl+b8+uV13l17y5
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
103XXtXMz2/kY49KzA7UVF1x2ytK7k2IbuLnl79vN8ndq1KHVq3GjH6B9KV+
8/kdd7Qqyi/E32ZZUuL111158OihHXt33nFX+zFjn3MqJOKdV7iVkFXy2lWl
bkBEPuo0o1vB8FlOuSA8rjA0pnBtpgGI4BsgaohMWsC/b9sNt96R3LrTltVp
IJiZ1PNIk8JCpvPmzbvyyivff/9969kZaHixhUwZIK7KPisgsnmIXgMi2fAI
soqgZeTGQFtGhUv4MWBd88YLiFhtzl6otY2bExQ7b+oyFrKrq/JK7G2rWyfW
j/ssQhWzMBQJ+uBrXFwNvR45EBy99qvpx2po1y1xzjWJMFJ47HlU+15uHKLS
rvCR45e2ip+0txQoXpE6Q0V1sReYOtn0o0+LLNGLIiEKpyxTpSr4FSfd8MQb
ha0SFuTvJ43VRmsMAreqO63xEEZx3wjXn+ufDGh5Z2Gr2O0VTr4CAwYM0A2D
xEuhvglyVldt31JICkhkx6cfvocRsef99xJApKXsiss+bszT1zX1u6K535aj
h/GtcfLgnhv8/F4c95akwrp1y/Drf/rmO3wpnxn56A1XX1FeU3ay4mRcQmxI
aHhxmdsuQ27hTplPd0XMwhGAaMl7/gE0BJZJpDvEIcNuQiyTGxZbsD5LJEbY
sV0OSE3zrsqU7E4X/ovdDc9/CMHRGx5+eh0+a403GdXe2F6fAD0Fo7Fi+vTp
fn5+n3zyiUFwakhDOonnDoj4/l9FQqaFIbZ8ZqHxry0AMTE8JLnfQDhVTtkM
vPwa9LFhEwTFZPvbsnYd4c38qi5qTfmyW17dmATfU9PmQeuYxM4j1h+TaKtt
LUD0WKXaLNwegMgUrKXOhnWI93t8F3YSv5heUUHr23mTka54KOTT0x+NQ0jL
swpPvZbSJn7inpPUPhYhU/aC06zlegGRu9g8io3wlcVq9rn3ckJjFj/6yoFq
UlRNt7yG+BSDy4BIl8qFILUQwqN2BN2VaxckBoMHD9SNMJ7XImLRpMBMUlTn
sUP7r72y2TNjRtPyGKQ4a/7z6cfrVy+/IyzoiiZ+m34/gq/Oz19+crOf3/gX
JmBcSF+79Co/v9dffBFfpQ5h7W5s2rzSWVpcc6p7927XXnPTrN9WOBXIyt0t
mU1LxFUUaMh3AtGiSP8jV5TgBd0hbg3yd0OgbUPnYceqqaGLDCRx2L0FRJ2H
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
sa1AiynqeFayHJa0qmlMyoBhuw+WYLcFy0WyucDE2mgAXR0QISgjMXI97axH
fiL6gFvDyzNwYPSSL6ZS9YCDhmZOmm4mbbGL+FToVTcY/tit0kgi+dz+T60I
sqV98jOuAHYCzbOjcECRgt+vECOVCn79k4omUeuaxqe1752yZhN2qLTofu4W
/NrHp5pG/dokatkbn54pr8A035EqtYrGdRLEj7FunYdakT8XA0R6G7TeKCu2
Q72OLgn/9MvZ0Nidd3Xdv+8El9uqRott9OnX2+p6pa/L2rSp0xvUa8hcpvXr
/7levZv/8X/NliVnqNC/z3ivzjJMYCp0rayg4OCARx6dOWu+ixewojQY8vrB
wzu73ts9MzcftBD00qDH/1nvxndeHEXM9JyslfUa+D33wgC3q7Lpnwkg/qO8
uKTCXhqfaKvf6MYPRn1HTkpW7u6snO2ZmRs3b9q+dXP+xg15tOmGZnT5RiJV
xOvZrgqIM0sCYrM7PnFRC9F7QOS6sUFLrgpwsowPnsZdnzrdNCZ973Hu/NSr
vM1EN1qiWecmv2puM51TUpjujBmb00I/xjyOBpSVWtmQJiCGhRuAKBaIqGZu
su3KVDzy+wuBtvT+Lx5xC3cxHRov3kV9ypRUwwDx7JVYiNgjrqTyWlKMaYC5
TlGo4BKMy1Vc4aJnRjZ0GEQ9vmIPWACROWEQ7bNd6MIvjTwWGJ3VrvPmNamY
KG/0M1h1IyEGGOWgxoulVAFEEZtj1DCW2kAGzXBXcJsOvwbFLVuWKzpyVgNE
4fTzHRB5mECjXCko88GyO+gvyObvP/hIUMy6Bwdu2HkMl7qpF/23E7j/s/lh
MRmR3dfPy8FFoK6obD/QKlmYASJRHiGNjh4ZolnNzsB3RC8MSFw14I1tZZqF
V8z9LcjyVdPDtKatgCgc9fSbBvvPLuPHh6SGxC6ftBgMZI0rz0j/HUD03vEo
EsRV7rKmzoHJswvCbTkPDDpVCCVrNFNaIFVW2I5FEg3iDP10f3D85qZxO9/8
Rl1/gCpOQLagovKCG4/4wRGcsL7J3cvmLlI4/V8nW4w1qjNdtUIRVWsjG/rS
gAj5DQoLMQG3E4/57lBA1MZ7Hj+XsVFLy1i/efPWvLy8zZs339ftXkNYGXT9
aVN/CQsJDQ+NiIho0bhJQHBI85lzFsmama+BQUOD7nvUXoE8uLLVKQtGjviY
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
aQsuu7tkYy109p53LHw7Ex1VnKYjIIanVlx0ZxO19oGVlbrd7tLS0vLy8qqq
KvpvcXHxxRdffLTnhXciUpfz89K9Lz3/eNiJJy5Ylo+03roXzDbd03DF5def
csoZJ4WFxURFF1f9QG3cYXfd/vdTf/30sHcVP5TkLzr5hLA7HriP3qHdTv3z
6WEntHkbmwLNSakZvzrlz6+/8xX1TUprvntj5Iejxox5d+Q7778/6v33RtbW
7teRllun+tkZ0Oi0GISq/SffVqNTFlSsY1pdt08N2k03/gW0XTDWHVZUoFvk
eDyYzyp1xRYiLEhHVcGUXIhMn9szdUadG/x+4I6MwE1xgtpBgMhSvU4PUec9
F+jhzFpgRCRU9R2yuZXwHsgQA0RnJCcYEFXNYMUzuCfpnTs1ByJck85O+7LJ
xwBRtKjohLcCOABREpHZ46KCHEcBiNiBtbgI4tPm3fJQoVtnXeEhJ3ZRE9t1
CubEeceQaeq6WDqqVrwERn0FMclz5y5D10V31ihZKy/9EdvpsX4KBkTxLnbx
GHXbyvDk/C27j24G9PEt8nRRyQodwo1q0JDum+VwV6yCpMvnRruWjJ0mZoMG
xbetH0zn/8EK6LV7ieX40T9S6NmyD87st/Ke57CWknMF79q167333hs1ahT9
d+TIkaNHjx4wYMAxniHzzXTwN414fnjYyX+cmVXA2hG9/trv7rrx2t59BpWu
3nn1JRedEhYWHz9gWd7aV194/Pcnhw174i1qFRdmzzs1LOzBJx+luzPyL2f9
5eSTG9x7Drj3Dxx8+am/6f7fcYvbCBSv+b6VVyRaWpN9I/VDdCyU1tsv15EL
QfqOx98lERmLS9fJ6lKTWLpFvIifInVij+/GfHCEgkm7Z/gvzjOiq72zHu54
siY6rWDYm+4AvkTXDNucFkO4WF+z49wJVrD6WuDTL76N66WXlDCaDowEahgy
hR6Jay4YstUtI1chBIgoB4Xa7FgEJv11A1mNqeZs9sOdT+RFuBY9PVLx6aAq
WGtKt3pA9Vr9nvxGYK68n7GQ6UEeULDbohDIKoSeyXNueSi31Qhm3Q8hkfcy
/uAHThYEbBmxfoCaCQG6Mn4D5i+Gc5Nm9xsyv57g+rIh7qzAVLOaj5AyWgUi
u6+D2SelupYzNfDNVH+88eH2CNfy6JTF3+8NuXmUQdBm6x9Be4KQxTqQmjW4
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
pKhsBc0rWyg3wLDXqronFzzyil9Fg4TIPzoA8dOxk+NidAaIKjHdBHqnlPZy
VSxYpiqsfs8MQaaazogdMiUifQtsc7pNCohZkSkrFxfj7WHyvUccsRduWstg
iMrck8tuXXzeoIkNNjMhjib/353c8SJErK0pNE+LCvc9XRbuyrny3k0+tn70
hggYPvlafgFYUQf6lQIQqYdSthli08ujk1bmFfiBiJE/obalOy2sm4ULRQRq
kMxdBtHJM869aN72FuxlFiFTiTumfJe8E2xAnLRYP+v8NQOvbXCrHBB15zxE
0TXG/r3hhhuO+ngp0FiIRg/JiYAWmZr1vP3V4hQkRDKyOVZgjsfPy2hNTGcH
2BxkraKiQg1o3KSlp4c3OIGCdUB1wkW37HCz/h9DNHqTDgFRHCz1r4luPe01
oP/1G3skLB8/vVmVtAeGldcMAkRmb3hDrTFfbDcdXQ+F2mp8Gehp05357qdb
olILL7l9W1tArluHgFhSAjgrClnyzhtQFX7esqwCRRfWtNkFiD8iDkC0e2Nx
35rw2GstUalZrsu/RiYxdlvzklF759vdQwiITTpccvP88wd+3cRYZLs8xCMU
0zSlqmTsrwTNiYlz3RGuFecMLlm9FS+LYiJHE6o4swNANNkIRQ/AxEWt0anF
aVet97EuROZVdgHi4cTinaFWialQg2RfCwy8LicmNbN8G/DhAgaKxv2doEm7
wlUE3pvwzUI9OnlL0qU7qNo3sL5dp/jidMdAXu7rrrvuGI9a4h0vChUhXctV
5LTbrBBIHKce8AvaYjwInec9mVUrymwoJmqsvo4XClTXVKmKn+tL7onQPbZp
N6RcsynSVTrum3pVkJ5qdl2Hc1lwW1qxfPwrfT1Vys0KpF//fZSrYvJcj861
s4z5izcKT1YPUUCUK8D9QjDpJVD4r3T9J87a161vTspVG4qqcTEDbMSbUOBI
7YGAOCk+Si8pQkA14O3/buxJAfTmrWs2s1nkihqK1G2dFHHKtuvBoqYEO4/S
r8/ulTZ+0157+AWPb0iP0g7fISASuOS2BX0GftWqseEkvBqhCxAPK6aYvsfp
HAkbULurFmJT8iJTCvKr0KhmxXgY6SK6VeCryQHEwq90A3w5LxCdsmLAdasY
4aHZFTI9EnF4fLhdcWiIAf96qiI6qej6+3e3abZpp4uiPqao7fsFNzrVNq0q
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
jabESrKiwBRpkcYlkxOipBXXA0mJehodExWryEC0WuZMnpQ3Z64uvQZasOr5
05kTfixQqPip83cehUV82a//9dt3rDLv43OwyAfv/jBkZOjdJ1DiYp+G16xW
L1f29xLjk3xPncmds9CS5RsE4hSdP3fhO27uR08eSeQS+vf9sme3zzgRm4f9
Pv8CEeLRo0fnzZtXv37D+Qv+eRgRLakuU6ySwLJMDUI0YMBAemEQ4ksDSwEh
dZDYWYesp6Qpkyfkyltih+dJnEgpJgow6bufB2fLk3v+P0twrZ0gjx0+skzx
sgfPXIriYc1qFbt3bk25afAXAwrmyr1z194kqzT1jz/C71yPfxzSommDWvXb
WGX405Dv33F1CX4Q+Sja3KRJo5o1qnBE5/XEQc9387pOXzAfffevP/3wXs5c
x3z9H8cn3Lx5KW9O03eDf9h/6FRcInfW/+Ifk6dpNYBaqUIqhJiyhUiNRAXR
oQyWLF7qscMTl3UAcPvy+RqVK1Su0ywOmWoweu2iSdmyoRPxmTxp9sYNWzlJ
tIhJaGQ+79uzdOnqJ09ehLI1wO9E7hwFv/jsf4Dj/po+zcUt74XLt4ECY+Ki
v/zq6wqVKt5/ePfqf5cqV6qxeuUWdLSCJObOm6d02TLNmjX75ZdfDh85kZjE
aTX+AstghQI1YA0YMGAgfXgJhfm0Co7lZmDVLkWX1a/lbGg8ps/ioD/r6+CS
/xVmFkKkJYECSQOVOC4p8sCeLQUK5KjdqPUpv+sht8OWLPqnafNGnXp0uXTz
NlGQ4WMj71cvV7FwoeJf/zDmSaLUtFHdJg1qXA0M6tS5R4FceXK6udRrUPtK
4OUKJSt83rPf6cP7GtStOWLURKsI27dr5e7m2qJd92O+lzZsXF2jRoVdXvtG
/DK6crnS3ru2WpDNZY6vVrlcnhzZ23za7b+bdxMS4vr17ZEnT76KlapVqfFx
788+v3g1CNdBSPhSiRJInRD1p2dPLgok/ZqlqMhHvXt169Wz+8MHEeglW1eu
/CBfnomz/sLnKEUd9lxvMmUvUarmlCnzrZz03/WLPft0vHUt8FbQzSJFyv+9
cAlULONGD/uoUIn5sxavWPLPv4v/zvfuhwGXbyKebvlJ06p1P752944omKdM
HF+zVr0Jk2Zcunw1MTE+b97cDRvWRxbi6dOnO3Xu3rtP/+g4bPNKio0Q8Qwi
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
    "], {{0, 342}, {603, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag[
   "Byte", ColorSpace -> "RGB", ImageResolution -> {113, 113}, Interleaving -> 
    True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->{380.2727272727275, Automatic},
  ImageSizeRaw->{603, 342},
  PlotRange->{{0, 603}, {0, 342}}]], "Input",ExpressionUUID->"b7c44f66-758f-\
4530-ab29-357c320b824d"],

Cell["PPG signal data is imported ", "Text",
 CellChangeTimes->{{3.752778400164192*^9, 
  3.7527784157497444`*^9}},ExpressionUUID->"2ba2d9e1-29da-4d4e-a00d-\
60e3fa11530b"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Datalong", "=", 
    RowBox[{
    "Import", "[", 
     "\"\<C:\\\\Users\\\\Arlene John\\\\Desktop\\\\data\\\\ppg_continuous.mat\
\>\"", "]"}]}], ";"}], " ", 
  RowBox[{"(*", 
   RowBox[{"load", " ", 
    RowBox[{"ppg_continuous", ".", "mat"}], " ", "file"}], "*)"}]}]], "Input",
 CellChangeTimes->{{3.7523307085944266`*^9, 3.7523307261552644`*^9}, {
  3.75233693986461*^9, 3.7523369400724106`*^9}, {3.752340669843255*^9, 
  3.75234067627029*^9}, {3.7527524597051673`*^9, 3.7527524829818344`*^9}, {
  3.752782450151415*^9, 3.7527824615320897`*^9}, {3.816862725976282*^9, 
  3.81686272786224*^9}},
 CellLabel->"In[3]:=",ExpressionUUID->"5b1162b0-0268-49dd-8266-abe72e19733e"],

Cell["\<\
Data imported is of a 3 dimensionsal form and needs to be converted to 2 \
dimensions.\
\>", "Text",
 CellChangeTimes->{{3.752778427297889*^9, 
  3.752778456917389*^9}},ExpressionUUID->"9e9a0df0-4a41-4bff-ba59-\
b049c62aa52e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Datalong", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"Datalong", "[", 
      RowBox[{"[", "1", "]"}], "]"}], "[", 
     RowBox[{"[", "All", "]"}], "]"}], "[", 
    RowBox[{"[", "All", "]"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.752331089703908*^9, 3.7523310932284155`*^9}},
 CellLabel->"In[4]:=",ExpressionUUID->"4a2f5b39-952f-4f56-9a3f-023181c88449"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Datalong", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Datalong", "[", 
       RowBox[{"[", "i", "]"}], "]"}], "[", 
      RowBox[{"[", "1", "]"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", 
       RowBox[{"Length", "[", "Datalong", "]"}]}], "}"}]}], "]"}]}], 
  ";"}]], "Input",
 CellLabel->"In[5]:=",ExpressionUUID->"5e3870f9-b2ac-4f52-816a-86b5a7ea4edd"],

Cell["Calling the stacking function", "Text",
 CellChangeTimes->{{3.7527784969596124`*^9, 
  3.7527785026237335`*^9}},ExpressionUUID->"69bfb3e5-813c-43da-8ec8-\
8fa57488f26c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Datalong", "=", 
   RowBox[{"stackdata", "[", 
    RowBox[{"Datalong", ",", "71"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7523312663742714`*^9, 3.7523312923594265`*^9}, {
   3.7523326134904594`*^9, 3.752332621610075*^9}, {3.752332685996112*^9, 
   3.75233269029742*^9}, 3.752333127860423*^9, {3.752333273525421*^9, 
   3.7523332752408247`*^9}, {3.752333356909691*^9, 3.752333357112491*^9}, {
   3.7523334243688326`*^9, 3.7523334748248363`*^9}, 3.7527587346657815`*^9},
 CellLabel->"In[6]:=",ExpressionUUID->"7cc7591d-58d9-4d51-9ec7-d2bbae635e24"],

Cell["\<\
Importing the class labels and converting it to a vector form\
\>", "Text",
 CellChangeTimes->{{3.7527785234729977`*^9, 
  3.752778548364765*^9}},ExpressionUUID->"cc5c08f3-efc2-452c-815b-\
d5a05351423f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"labels", "=", 
   RowBox[{
   "Import", "[", 
    "\"\<C:\\\\Users\\\\Arlene \
John\\\\Desktop\\\\data\\\\label_continuous2.mat\>\"", "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.7517151679246874`*^9, 3.7517152058407636`*^9}, {
   3.7521831852706833`*^9, 3.7521832179129887`*^9}, 3.7522424862267694`*^9, {
   3.7522425832273006`*^9, 3.7522425835139027`*^9}, {3.752355118240967*^9, 
   3.752355139190716*^9}, {3.752752637587802*^9, 3.7527526496093297`*^9}, 
   3.752758743283101*^9, 3.752761552430395*^9, 3.7527624622883425`*^9, 
   3.752762697752305*^9, {3.816862744759403*^9, 3.816862746118768*^9}},
 CellLabel->"In[7]:=",ExpressionUUID->"1f00d579-5c1f-4d32-afad-8336452404fc"],

Cell[BoxData[
 RowBox[{
  RowBox[{"labels", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"labels", "[", 
      RowBox[{"[", "1", "]"}], "]"}], "[", 
     RowBox[{"[", "All", "]"}], "]"}], "[", 
    RowBox[{"[", "All", "]"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.751715217734789*^9, 3.751715222022498*^9}, {
   3.751717680898245*^9, 3.751717695237671*^9}, {3.752242488855579*^9, 
   3.7522424910403886`*^9}, {3.7523551476722364`*^9, 3.7523551564392557`*^9}, 
   3.7527587479604125`*^9, 3.7527588983253727`*^9},
 CellLabel->"In[8]:=",ExpressionUUID->"3dda273d-3ad3-40e2-956c-548def14c590"],

Cell[BoxData[
 RowBox[{
  RowBox[{"labels", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"labels", "[", 
       RowBox[{"[", "i", "]"}], "]"}], "[", 
      RowBox[{"[", "1", "]"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", 
       RowBox[{"Length", "[", "labels", "]"}]}], "}"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.751717776412816*^9, 3.7517178364499245`*^9}, {
  3.7522425113150578`*^9, 3.7522425160760746`*^9}, {3.752355175478099*^9, 
  3.752355181231112*^9}, {3.752758751107319*^9, 3.752758755677129*^9}},
 CellLabel->"In[9]:=",ExpressionUUID->"829ded47-8c26-4a5d-abc1-114455d57e7a"],

Cell[TextData[{
 "As the ",
 StyleBox["stackdata",
  FontSlant->"Italic"],
 " function had the first row just full of zeros, prepending a class label of \
0."
}], "Text",
 CellChangeTimes->{{3.752778566645423*^9, 
  3.7527785944187055`*^9}},ExpressionUUID->"e1aa52a0-9904-4fb3-a215-\
c15b7860b652"],

Cell[BoxData[
 RowBox[{
  RowBox[{"labels", "=", 
   RowBox[{"Prepend", "[", 
    RowBox[{"labels", ",", "0."}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7523554528884974`*^9, 3.752355472273243*^9}, {
  3.7527587582944355`*^9, 3.7527587627576466`*^9}},
 CellLabel->"In[10]:=",ExpressionUUID->"9f9a3787-0795-4a67-8aab-2bdaa6040e0f"],

Cell[TextData[{
 "Frames with irrelevant information (more zeros than actual values, except \
the first row ) need to be deleted. Calling the ",
 StyleBox["deleting",
  FontSlant->"Italic"],
 " function"
}], "Text",
 CellChangeTimes->{{3.7527786180913835`*^9, 
  3.7527786627156363`*^9}},ExpressionUUID->"1260ff61-c3c4-4af8-89b4-\
3b035786a03d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"T", "=", 
   RowBox[{"deleting", "[", 
    RowBox[{"Datalong", ",", "labels"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7527573338442235`*^9, 3.7527573506549644`*^9}, {
  3.7527578517497945`*^9, 3.7527578519650946`*^9}, {3.752758504376829*^9, 
  3.752758505082031*^9}, {3.752758709189822*^9, 3.75275871294023*^9}},
 CellLabel->"In[11]:=",ExpressionUUID->"145d422e-a2bd-40c0-954d-bd29d67e34fb"],

Cell["Extracting data and labels from the variable T.", "Text",
 CellChangeTimes->{{3.7527787106695843`*^9, 
  3.752778721805716*^9}},ExpressionUUID->"94c7db21-5505-47c7-8486-\
7eff9d937dd6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Datalongstack", "=", 
   RowBox[{"T", "[", 
    RowBox[{"[", 
     RowBox[{"All", ",", 
      RowBox[{"1", ";;", 
       RowBox[{"-", "2"}]}]}], "]"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7527587815008907`*^9, 3.7527588343351154`*^9}, {
  3.752759002246423*^9, 3.7527590066805353`*^9}},
 CellLabel->"In[12]:=",ExpressionUUID->"213080ca-63a7-4f2a-b9fd-d871ad3079cc"],

Cell[BoxData[
 RowBox[{
  RowBox[{"label", "=", 
   RowBox[{"T", "[", 
    RowBox[{"[", 
     RowBox[{"All", ",", 
      RowBox[{"-", "1"}]}], "]"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7527588191303806`*^9, 3.752758838262225*^9}, {
  3.7527590250556803`*^9, 3.7527590255486813`*^9}, {3.7527602359298325`*^9, 
  3.7527602403925495`*^9}},
 CellLabel->"In[13]:=",ExpressionUUID->"a6466029-0956-4819-ac35-8832a7eccd38"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"label", "[", 
    RowBox[{"[", "1", "]"}], "]"}], "=", "0."}], ";"}]], "Input",
 CellChangeTimes->{{3.75277342032312*^9, 3.752773433311391*^9}},
 CellLabel->"In[14]:=",ExpressionUUID->"1009325c-cb07-4316-ba48-2ce4f2da5a93"],

Cell["\<\
Separating training data, training labels, testing data and testing labels. \
70%+20 samples are used for training while the rest is used for testing.\
\>", "Text",
 CellChangeTimes->{{3.752778743831686*^9, 3.7527787644478416`*^9}, {
  3.7527788933488708`*^9, 
  3.7527789143026376`*^9}},ExpressionUUID->"fd202023-693d-4ca0-8560-\
10b1020170e9"],

Cell[BoxData[
 RowBox[{
  RowBox[{"trainingdata1", "=", 
   RowBox[{
    RowBox[{"Datalongstack", "[", 
     RowBox[{"[", 
      RowBox[{"1", ";;", 
       RowBox[{
        RowBox[{"Ceiling", "[", 
         RowBox[{"0.7", "*", 
          RowBox[{"Length", "[", "Datalongstack", "]"}]}], "]"}], "+", 
        "20"}]}], "]"}], "]"}], "[", 
    RowBox[{"[", "All", "]"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.751718143697261*^9, 3.75171822503541*^9}, {
  3.751718279294508*^9, 3.7517182799965096`*^9}, {3.752183288555978*^9, 
  3.75218328948178*^9}, {3.7521891242563963`*^9, 3.7521891264212008`*^9}, {
  3.752242520308691*^9, 3.7522425219574966`*^9}, {3.752355186589724*^9, 
  3.752355194141141*^9}, {3.752759432264575*^9, 3.752759432555376*^9}, {
  3.752778856914245*^9, 3.7527788736771035`*^9}},
 CellLabel->"In[15]:=",ExpressionUUID->"d3dbf2d9-646c-4493-b58f-a14a4be6f727"],

Cell[BoxData[
 RowBox[{
  RowBox[{"testdata1", "=", 
   RowBox[{
    RowBox[{"Datalongstack", "[", 
     RowBox[{"[", 
      RowBox[{
       RowBox[{
        RowBox[{"Ceiling", "[", 
         RowBox[{"0.7", "*", 
          RowBox[{"Length", "[", "Datalongstack", "]"}]}], "]"}], "+", "21"}],
        ";;"}], " ", "]"}], "]"}], "[", 
    RowBox[{"[", "All", "]"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7517182345398273`*^9, 3.7517182854429193`*^9}, {
   3.7521832948835974`*^9, 3.7521832957097993`*^9}, 3.7521891107739687`*^9, {
   3.752242525406309*^9, 3.7522425276149178`*^9}, {3.752355201635359*^9, 
   3.752355203881365*^9}, {3.752759437685391*^9, 3.7527594379711914`*^9}, {
   3.752778933205991*^9, 3.752778934930497*^9}},
 CellLabel->"In[16]:=",ExpressionUUID->"998665d5-9c6d-4e1c-8ce3-36be80e10d72"],

Cell[BoxData[
 RowBox[{
  RowBox[{"traininglabel1", "=", 
   RowBox[{
    RowBox[{"label", "[", 
     RowBox[{"[", 
      RowBox[{"1", ";;", 
       RowBox[{
        RowBox[{"Ceiling", "[", 
         RowBox[{"0.7", "*", 
          RowBox[{"Length", "[", "Datalongstack", "]"}]}], "]"}], "+", 
        "20"}]}], "]"}], "]"}], "[", 
    RowBox[{"[", "All", "]"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7517182881527243`*^9, 3.7517183028287506`*^9}, {
   3.7521833000654144`*^9, 3.752183300750018*^9}, {3.7521891286308055`*^9, 
   3.7521891292100067`*^9}, {3.752242531346933*^9, 3.7522425329953413`*^9}, 
   3.752355212583085*^9, {3.752759440121697*^9, 3.752759440386897*^9}, 
   3.752778938373008*^9},
 CellLabel->"In[17]:=",ExpressionUUID->"f6ecea80-b5c9-4f63-80d9-fc8ca7a5b22f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"testlabel1", "=", 
   RowBox[{
    RowBox[{"label", "[", 
     RowBox[{"[", 
      RowBox[{
       RowBox[{
        RowBox[{"Ceiling", "[", 
         RowBox[{"0.7", "*", 
          RowBox[{"Length", "[", "Datalongstack", "]"}]}], "]"}], "+", "21"}],
        ";;"}], " ", "]"}], "]"}], "[", 
    RowBox[{"[", "All", "]"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7517183052965555`*^9, 3.7517183193249807`*^9}, {
   3.7521833050430346`*^9, 3.7521833057036366`*^9}, {3.752189132395813*^9, 
   3.752189134861018*^9}, {3.752242536536565*^9, 3.7522425383753724`*^9}, 
   3.752355216166994*^9, {3.752759443838909*^9, 3.7527594440573096`*^9}, {
   3.7527789424761224`*^9, 3.75277894454513*^9}},
 CellLabel->"In[18]:=",ExpressionUUID->"6ee66848-c09d-4e81-9794-c2ea2952a3b4"],

Cell["\<\
For classification , the machine learning algorithm chosen was Support Vector \
Machine as this is a binary classification problem and SVM is fast with \
regard to fit time, very fast with regard to prediction time with moderate \
memory overhead. The KernelType chosen was Polynomial with Polynomial Degree \
of 8 over multiple rounds of trial and error.\
\>", "Text",
 CellChangeTimes->{{3.7527789505701485`*^9, 3.752779009470926*^9}, {
  3.7527790765204964`*^9, 
  3.752779164422202*^9}},ExpressionUUID->"22f2ae2d-1db7-49fb-8acf-\
f0a68a5d208c"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"classifier1", "=", 
    RowBox[{"Classify", "[", 
     RowBox[{
      RowBox[{"trainingdata1", "\[Rule]", " ", "traininglabel1"}], ",", 
      RowBox[{"Method", "\[Rule]", " ", 
       RowBox[{"{", 
        RowBox[{"\"\<SupportVectorMachine\>\"", ",", 
         RowBox[{"\"\<KernelType\>\"", "\[Rule]", " ", "\"\<Polynomial\>\""}],
          ",", 
         RowBox[{"\"\<PolynomialDegree\>\"", "\[Rule]", " ", "18"}]}], 
        "}"}]}]}], "]"}]}], ";"}], " ", 
  RowBox[{"(*", 
   RowBox[{"generating", " ", "a", " ", "classifer", " ", "model"}], 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.7517183391826167`*^9, 3.7517184170418987`*^9}, {
   3.7517200150407877`*^9, 3.751720036175997*^9}, {3.75218332098409*^9, 
   3.7521833321559296`*^9}, {3.7522425432147818`*^9, 3.752242550464398*^9}, {
   3.7523542830313764`*^9, 3.7523542859106827`*^9}, {3.7523543191476903`*^9, 
   3.752354320763893*^9}, {3.752354379536994*^9, 3.752354399562355*^9}, {
   3.752354494683588*^9, 3.7523544959646907`*^9}, {3.752354598812046*^9, 
   3.752354599317547*^9}, {3.752354676534233*^9, 3.7523546770646334`*^9}, {
   3.7523547340495644`*^9, 3.752354734614966*^9}, {3.7523548391773105`*^9, 
   3.7523548396491117`*^9}, {3.75235493877865*^9, 3.752354939286651*^9}, {
   3.752759424512455*^9, 3.752759424802656*^9}, {3.752759458311743*^9, 
   3.7527594612231517`*^9}, {3.752759741039012*^9, 3.7527597412886124`*^9}, {
   3.7527603097686367`*^9, 3.7527603124097443`*^9}, {3.7527603593065314`*^9, 
   3.752760364001943*^9}, 3.7527616187075863`*^9, {3.752761967294349*^9, 
   3.7527619816090865`*^9}, 3.7527624050004463`*^9, {3.7527625595970426`*^9, 
   3.752762559863243*^9}, {3.752762731230464*^9, 3.752762731559065*^9}, {
   3.7527627841007376`*^9, 3.7527627846933403`*^9}, {3.752762898013154*^9, 
   3.752762898940159*^9}, {3.7527629638464684`*^9, 3.752762964142869*^9}, {
   3.75276303973252*^9, 3.752763040169321*^9}, {3.7527631167493825`*^9, 
   3.7527631172835855`*^9}, {3.752779171823325*^9, 3.752779180976459*^9}},
 CellLabel->"In[19]:=",ExpressionUUID->"8046ecb0-5f6b-430a-ac18-84bef4213917"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"results1", "=", 
    RowBox[{"classifier1", "[", "testdata1", "]"}]}], ";"}], 
  RowBox[{"(*", 
   RowBox[{
   "obtaining", " ", "classification", " ", "results", " ", "using", " ", 
    "the", " ", "generated", " ", "model", " ", "on", " ", "the", " ", 
    "testdata"}], "*)"}]}]], "Input",
 CellChangeTimes->{{3.7521833721330795`*^9, 3.7521833840493107`*^9}, {
  3.7522425548398066`*^9, 3.752242560846619*^9}, {3.752242766013702*^9, 
  3.7522427666275043`*^9}, {3.752759517660096*^9, 3.752759517963397*^9}, {
  3.7527597073944235`*^9, 3.752759711189434*^9}, {3.7527791850177736`*^9, 
  3.7527792084734683`*^9}},
 CellLabel->"In[20]:=",ExpressionUUID->"c0476b38-627b-4dcd-8e28-3914d5b66021"],

Cell[TextData[{
 "When checking for the performance of event detection problems, the point of \
event occurrence is allowed some level of tolerance. To correct for this \
tolerance, the function ",
 StyleBox[" beatbybeat",
  FontSlant->"Italic"],
 " is defined with a tolerance band of 0.15 seconds. The sampling rate for \
the PPG signals were 125 Hz. The function returns a matrix with the test \
classes and obtained classes which have been tweaked to benefit from the \
tolerance."
}], "Text",
 CellChangeTimes->{{3.752779238875374*^9, 3.7527794755027914`*^9}, 
   3.8168626030403996`*^9},ExpressionUUID->"1fc8bccb-7058-48a7-8c7d-\
3df520dc95b3"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"beatbybeat", "[", 
    RowBox[{"ref1_", ",", "compare1_", ",", "freq_"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Fs", "=", "freq"}], ",", 
       RowBox[{"ref", "=", "ref1"}], ",", 
       RowBox[{"compare", "=", "compare1"}], ",", "signal1", ",", "signal2", 
       ",", "window", ",", "windowpos", ",", "S", ",", "FPsetpos", ",", "k", 
       ",", "pos", ",", "joined", ",", "joinedmatrix"}], "}"}], ",", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"ref1", " ", "is", " ", "the", " ", "test", " ", "class"}], 
       ",", " ", 
       RowBox[{
       "compare1", " ", "is", " ", "result", " ", "class", " ", "and", " ", 
        "freq", " ", "is", " ", "the", " ", "signal", " ", "sampling", " ", 
        "frequency"}]}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "ref", "]"}], ">", "3"}], " ", "&&", " ", 
         RowBox[{
          RowBox[{"Length", "[", "compare", "]"}], ">", "3"}]}], ",", 
        "\[IndentingNewLine]", "\t\t\t\t\t\t\t\t\t", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Length", "[", "ref", "]"}], ">=", 
            RowBox[{"Length", "[", "compare", "]"}]}], ",", 
           RowBox[{"compare", "=", 
            RowBox[{"N", "[", 
             RowBox[{"ArrayPad", "[", 
              RowBox[{"compare", ",", 
               RowBox[{"{", 
                RowBox[{"0", ",", 
                 RowBox[{
                  RowBox[{"Length", "[", "ref", "]"}], "-", 
                  RowBox[{"Length", "[", "compare", "]"}]}]}], "}"}]}], "]"}],
              "]"}]}], ",", "\[IndentingNewLine]", "\t\t\t\t\t\t\t\t\t\t", 
           RowBox[{"ref", "=", 
            RowBox[{"N", "[", 
             RowBox[{"ArrayPad", "[", 
              RowBox[{"ref", ",", 
               RowBox[{"{", 
                RowBox[{"0", ",", 
                 RowBox[{
                  RowBox[{"Length", "[", "compare", "]"}], "-", 
                  RowBox[{"Length", "[", "ref", "]"}]}]}], "}"}]}], "]"}], 
             "]"}]}]}], "]"}], ";", 
         RowBox[{"signal1", "=", "ref"}], ";", 
         RowBox[{"signal2", "=", "compare"}], ";", 
         RowBox[{"For", "[", 
          RowBox[{
           RowBox[{"i", "=", "1"}], ",", 
           RowBox[{"i", "\[LessEqual]", 
            RowBox[{"Length", "[", "signal1", "]"}]}], ",", 
           RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"signal1", "[", 
               RowBox[{"[", "i", "]"}], "]"}], "\[Equal]", "0"}], ",", 
             RowBox[{"Continue", "[", "]"}], ",", 
             RowBox[{
              RowBox[{"window", "=", 
               RowBox[{"signal2", "[", 
                RowBox[{"[", 
                 RowBox[{
                  RowBox[{"Max", "[", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"i", "-", 
                    RowBox[{"Round", "[", 
                    RowBox[{"0.15", "*", "Fs"}], "]"}]}], ")"}], ",", "1"}], 
                   "]"}], ";;", 
                  RowBox[{"Min", "[", 
                   RowBox[{
                    RowBox[{"Length", "[", "signal2", "]"}], ",", 
                    RowBox[{"(", 
                    RowBox[{"i", "+", 
                    RowBox[{"Round", "[", 
                    RowBox[{"0.15", "*", "Fs"}], "]"}]}], ")"}]}], "]"}]}], 
                 "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
              "\t\t\t\t\t\t\t\t", 
              RowBox[{"windowpos", "=", 
               RowBox[{"Range", "[", 
                RowBox[{
                 RowBox[{"Max", "[", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{"i", "-", 
                    RowBox[{"Round", "[", 
                    RowBox[{"0.15", "*", "Fs"}], "]"}]}], ")"}], ",", "1"}], 
                  "]"}], ",", 
                 RowBox[{"Min", "[", 
                  RowBox[{
                   RowBox[{"Length", "[", "signal2", "]"}], ",", 
                   RowBox[{"(", 
                    RowBox[{"i", "+", 
                    RowBox[{"Round", "[", 
                    RowBox[{"0.15", "*", "Fs"}], "]"}]}], ")"}]}], "]"}], ",",
                  "1"}], "]"}]}], ";", "\[IndentingNewLine]", 
              "\t\t\t\t\t\t\t\t", 
              RowBox[{"S", "=", 
               RowBox[{"Total", "[", "window", "]"}]}], ";", 
              "\[IndentingNewLine]", "\t\t\t\t\t\t\t\t", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"S", "\[Equal]", "1"}], ",", 
                RowBox[{
                 RowBox[{
                  RowBox[{"signal2", "[", 
                   RowBox[{"[", 
                    RowBox[{
                    RowBox[{"Max", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"i", "-", 
                    RowBox[{"Round", "[", 
                    RowBox[{"0.15", "*", "Fs"}], "]"}]}], ")"}], ",", "1"}], 
                    "]"}], ";;", 
                    RowBox[{"Min", "[", 
                    RowBox[{
                    RowBox[{"Length", "[", "signal2", "]"}], ",", 
                    RowBox[{"(", 
                    RowBox[{"i", "+", 
                    RowBox[{"Round", "[", 
                    RowBox[{"0.15", "*", "Fs"}], "]"}]}], ")"}]}], "]"}]}], 
                    "]"}], "]"}], "=", "0"}], ";", 
                 RowBox[{
                  RowBox[{"signal2", "[", 
                   RowBox[{"[", "i", "]"}], "]"}], "=", "1"}]}], ","}], "]"}],
               ";", "\[IndentingNewLine]", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"S", ">", "1"}], ",", 
                RowBox[{
                 RowBox[{"FPsetpos", "=", 
                  RowBox[{"{", "0", "}"}]}], ";", " ", 
                 RowBox[{"For", "[", 
                  RowBox[{
                   RowBox[{"k", "=", "1"}], ",", 
                   RowBox[{"k", "\[LessEqual]", 
                    RowBox[{"Length", "[", "window", "]"}]}], ",", 
                   RowBox[{"k", "++"}], ",", 
                   RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"window", "[", 
                    RowBox[{"[", "k", "]"}], "]"}], "\[Equal]", "1"}], ",", 
                    RowBox[{"FPsetpos", "=", 
                    RowBox[{"Join", "[", 
                    RowBox[{"FPsetpos", ",", 
                    RowBox[{"{", 
                    RowBox[{"windowpos", "[", 
                    RowBox[{"[", "k", "]"}], "]"}], "}"}]}], "]"}]}], ","}], 
                    "]"}]}], "]"}], ";", 
                 RowBox[{"FPsetpos", "=", 
                  RowBox[{"FPsetpos", "[", 
                   RowBox[{"[", 
                    RowBox[{"2", ";;"}], "]"}], "]"}]}], ";", 
                 RowBox[{"pos", "=", 
                  RowBox[{"Ordering", "[", 
                   RowBox[{
                    RowBox[{"FPsetpos", "-", "k"}], ",", "1"}], "]"}]}], ";", 
                 RowBox[{
                  RowBox[{"signal2", "[", 
                   RowBox[{"[", 
                    RowBox[{"FPsetpos", "[", 
                    RowBox[{"[", "pos", "]"}], "]"}], "]"}], "]"}], "=", 
                  "0"}], ";", 
                 RowBox[{
                  RowBox[{"signal2", "[", 
                   RowBox[{"[", "i", "]"}], "]"}], "=", "1"}]}], ","}], 
               "]"}]}], ","}], "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"joined", "=", 
          RowBox[{"Join", "[", 
           RowBox[{"signal1", ",", "signal2"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"joinedmatrix", "=", 
          RowBox[{"Multicolumn", "[", 
           RowBox[{"joined", ",", "2"}], "]"}]}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Length", "[", "ref", "]"}], ">=", 
            RowBox[{"Length", "[", "compare", "]"}]}], ",", 
           RowBox[{"compare", "=", 
            RowBox[{"N", "[", 
             RowBox[{"ArrayPad", "[", 
              RowBox[{"compare", ",", 
               RowBox[{"{", 
                RowBox[{"0", ",", 
                 RowBox[{
                  RowBox[{"Length", "[", "ref", "]"}], "-", 
                  RowBox[{"Length", "[", "compare", "]"}]}]}], "}"}]}], "]"}],
              "]"}]}], ",", "\[IndentingNewLine]", "\t\t\t\t\t\t\t\t\t\t", 
           RowBox[{"ref", "=", 
            RowBox[{"N", "[", 
             RowBox[{"ArrayPad", "[", 
              RowBox[{"ref", ",", 
               RowBox[{"{", 
                RowBox[{"0", ",", 
                 RowBox[{
                  RowBox[{"Length", "[", "compare", "]"}], "-", 
                  RowBox[{"Length", "[", "ref", "]"}]}]}], "}"}]}], "]"}], 
             "]"}]}]}], "]"}], ";", 
         RowBox[{"signal1", "=", "ref"}], ";", 
         RowBox[{"signal2", "=", "compare"}], ";", "\[IndentingNewLine]", 
         RowBox[{"joined", "=", 
          RowBox[{"Join", "[", 
           RowBox[{"signal1", ",", "signal2"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"joinedmatrix", "=", 
          RowBox[{"Multicolumn", "[", 
           RowBox[{"joined", ",", "2"}], "]"}]}]}], ","}], "]"}], ";", 
      RowBox[{"Return", "[", "joinedmatrix", "]"}], ";"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.752750425500022*^9, 3.7527505605756073`*^9}, {
  3.752750863216938*^9, 3.7527508847464113`*^9}, {3.7527795204882593`*^9, 
  3.7527795537102933`*^9}},
 CellLabel->"In[21]:=",ExpressionUUID->"69785ee8-db12-4c0c-b6c5-bf91130e464b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"joinmat", "=", 
   RowBox[{"beatbybeat", "[", 
    RowBox[{"testlabel1", ",", "results1", ",", "125"}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.7527620711045275`*^9, 3.7527621042024193`*^9}, {
  3.752762178988308*^9, 3.7527621800157127`*^9}},
 CellLabel->"In[22]:=",ExpressionUUID->"37d372b5-1678-49fd-8e3a-e98ebf4cdcd1"],

Cell[TextData[{
 "Once the corrected result classes are obtained, the confusion matrix needs \
to be calculated. For this a function ",
 StyleBox["confusionmatrix",
  FontSlant->"Italic"],
 " was defined which returns the confusion matrix as {{True Negatives, False \
Positives},{False Negatives, True Positives}}"
}], "Text",
 CellChangeTimes->{{3.752779481738418*^9, 3.7527795014833975`*^9}, {
  3.752779560199215*^9, 
  3.7527796402107997`*^9}},ExpressionUUID->"1a4dcd1b-21b1-44d8-ac0a-\
cb73b76782ed"],

Cell[BoxData[
 RowBox[{
  RowBox[{"confusionmatrix", "[", 
   RowBox[{"joinedmatrix_", ",", "length_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "t", ",", "patt1", ",", "patt2", ",", "patt3", ",", "patt4", ",", "Cval",
       ",", "TP", ",", "FP", ",", "TN", ",", "FN"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"patt1", "=", 
      RowBox[{"{", 
       RowBox[{"0.", ",", "0."}], "}"}]}], ";", 
     RowBox[{"patt2", "=", 
      RowBox[{"{", 
       RowBox[{"0.", ",", "1."}], "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"patt3", "=", 
      RowBox[{"{", 
       RowBox[{"1.", ",", "0."}], "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"patt4", "=", 
      RowBox[{"{", 
       RowBox[{"1.", ",", "1."}], "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"TP", "=", "0"}], ";", "\[IndentingNewLine]", 
     RowBox[{"TN", "=", "0"}], ";", "\[IndentingNewLine]", 
     RowBox[{"FP", "=", "0"}], ";", "\[IndentingNewLine]", 
     RowBox[{"FN", "=", "0"}], ";", "\[IndentingNewLine]", 
     RowBox[{"For", "[", 
      RowBox[{
       RowBox[{"t", "=", "1"}], ",", 
       RowBox[{"t", "\[LessEqual]", "length"}], ",", 
       RowBox[{"t", "++"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"joinedmatrix", "[", 
             RowBox[{"[", "1", "]"}], "]"}], "[", 
            RowBox[{"[", "t", "]"}], "]"}], "\[Equal]", "patt1"}], ",", 
          RowBox[{"TN", "++"}], ","}], "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"joinedmatrix", "[", 
             RowBox[{"[", "1", "]"}], "]"}], "[", 
            RowBox[{"[", "t", "]"}], "]"}], "\[Equal]", "patt2"}], ",", 
          RowBox[{"FP", "++"}], ","}], "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"joinedmatrix", "[", 
             RowBox[{"[", "1", "]"}], "]"}], "[", 
            RowBox[{"[", "t", "]"}], "]"}], "\[Equal]", "patt3"}], ",", 
          RowBox[{"FN", "++"}], ","}], "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"joinedmatrix", "[", 
             RowBox[{"[", "1", "]"}], "]"}], "[", 
            RowBox[{"[", "t", "]"}], "]"}], "\[Equal]", "patt4"}], ",", 
          RowBox[{"TP", "++"}], ","}], "]"}], ";"}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Cval", "=", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"TN", ",", "FP"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"FN", ",", "TP"}], "}"}]}], "}"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Return", "[", "Cval", "]"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7521819757368402`*^9, 3.7521819930730777`*^9}, {
   3.752182193283187*^9, 3.75218232372097*^9}, {3.752182417504464*^9, 
   3.7521827649158688`*^9}, {3.7521828819029245`*^9, 
   3.7521829185325994`*^9}, {3.752185923443325*^9, 3.7521859588194284`*^9}, 
   3.7521862058484063`*^9, {3.7521866726674747`*^9, 3.752186711201789*^9}, {
   3.7521868943727636`*^9, 3.752186899437574*^9}, {3.75218695570192*^9, 
   3.752186956175322*^9}, {3.7521875050155907`*^9, 3.7521875664121523`*^9}, {
   3.7521888789958553`*^9, 3.7521888965931005`*^9}, {3.7521892702259097`*^9, 
   3.7521892745221243`*^9}, {3.7521894999082355`*^9, 
   3.7521895096896725`*^9}, {3.7527621262481775`*^9, 
   3.7527621677650785`*^9}, {3.7527623370372653`*^9, 3.7527623472338924`*^9}},
 CellLabel->"In[23]:=",ExpressionUUID->"a606b066-2d73-4839-aa5d-ed7240eb02a0"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Ck1", "=", 
  RowBox[{"confusionmatrix", "[", 
   RowBox[{"joinmat", ",", 
    RowBox[{"Max", "[", 
     RowBox[{
      RowBox[{"Length", "[", "testlabel1", "]"}], ",", 
      RowBox[{"Length", "[", "results1", "]"}]}], "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7527621834359245`*^9, 3.7527622038674803`*^9}, {
   3.752762322044222*^9, 3.752762330427249*^9}, {3.752762370552759*^9, 
   3.7527623897655687`*^9}, 3.7527648775405383`*^9},
 CellLabel->"In[24]:=",ExpressionUUID->"49e62f4f-8c83-42f0-a6f5-6b4de7311b97"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"10614", ",", "108"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10", ",", "143"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.752762191750346*^9, 3.7527622050027847`*^9}, {
   3.752762363607939*^9, 3.752762391155777*^9}, 3.752762677867201*^9, 
   3.752762954267233*^9, 3.7527630264516425`*^9, 3.752763106984705*^9, 
   3.752763186442525*^9, 3.75276487824254*^9, 3.7527730135004845`*^9, 
   3.752909035946251*^9, 3.8168629455179853`*^9},
 CellLabel->"Out[24]=",ExpressionUUID->"2637a4e6-0454-41ff-a059-41bd7851e3a0"]
}, Open  ]],

Cell["\<\
From the confusion matrix, we observer that the classifier exhibited a \
Sensitivity of 94.1% and specificity of 99.5%. Sensitivity is not very good \
and in case of physiological signals, specificity needs to be 100% as a \
larger number of false positives can leads to Alarm Fatigue. Also the \
PolynomialDegree chosen was 18, which is high leading to more time consuming \
computations and therefore is not optimal. Therefore the use of ECG signals \
with a much more vibrant spatio-temporal structure is discussed in the next \
section. The classifier performance is checked and animated to simulate \
real-time peak detection conditions next\
\>", "Text",
 CellChangeTimes->{{3.752779658754572*^9, 3.7527796776729517`*^9}, {
  3.752779771607152*^9, 3.752779773819558*^9}, {3.752779823776408*^9, 
  3.752779845659988*^9}, {3.752779888990735*^9, 3.7527800252303915`*^9}, {
  3.75278006497182*^9, 3.752780107526856*^9}, {3.752780793677127*^9, 
  3.75278079409453*^9}, {3.7527810773318405`*^9, 
  3.7527811472862062`*^9}},ExpressionUUID->"04b2928f-26d0-406f-b3de-\
d445ede9f574"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"signal1", "=", 
    RowBox[{
    "Import", "[", 
     "\"\<C:\\\\Users\\\\Arlene \
John\\\\Desktop\\\\data\\\\PPG_signal.mat\>\"", "]"}]}], ";"}], " ", 
  RowBox[{"(*", 
   RowBox[{
   "importing", " ", "ppg", " ", "signal", " ", "and", " ", "converting", " ",
     "to", " ", "a", " ", "signal", " ", "vector", " ", "with", " ", "zero", 
    " ", "padding"}], "*)"}]}]], "Input",
 CellChangeTimes->{{3.7522174766272483`*^9, 3.7522174933124886`*^9}, {
  3.752243823393223*^9, 3.7522438288938336`*^9}, {3.752772197153048*^9, 
  3.752772197418248*^9}, {3.7527801101564674`*^9, 3.7527801379150376`*^9}, {
  3.752782981330336*^9, 3.752782982360942*^9}, {3.8168629525122795`*^9, 
  3.8168629535265665`*^9}},
 CellLabel->"In[25]:=",ExpressionUUID->"05a870cc-c796-4dd7-b115-d1cba8e74ba1"],

Cell[BoxData[
 RowBox[{
  RowBox[{"signal1", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"signal1", "[", 
      RowBox[{"[", "1", "]"}], "]"}], "[", 
     RowBox[{"[", "All", "]"}], "]"}], "[", 
    RowBox[{"[", "All", "]"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7522175713713846`*^9, 3.7522175774572*^9}, {
  3.7522438318698397`*^9, 3.7522438340306435`*^9}, {3.752772201265701*^9, 
  3.7527722054423356`*^9}},
 CellLabel->"In[26]:=",ExpressionUUID->"8efcff32-7220-445c-8e53-1b9be745041f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"signal1", "=", 
   RowBox[{"Transpose", "[", "signal1", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7522175314198847`*^9, 3.7522175401110053`*^9}, {
  3.752243837410651*^9, 3.7522438399186563`*^9}, {3.752772207942745*^9, 
  3.752772211011175*^9}},
 CellLabel->"In[27]:=",ExpressionUUID->"529ab89b-e9ca-4f28-9f12-4d460c36c7d7"],

Cell[BoxData[
 RowBox[{
  RowBox[{"signalpadded1", "=", 
   RowBox[{"ArrayPad", "[", 
    RowBox[{"signal1", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"70", ",", "0"}], "}"}]}], "}"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.752217944719022*^9, 3.7522179777859044`*^9}, {
  3.752218103067713*^9, 3.7522181477820253`*^9}, {3.752243842237461*^9, 
  3.752243853859085*^9}, {3.75277221301319*^9, 3.752772216271216*^9}},
 CellLabel->"In[28]:=",ExpressionUUID->"3aff787a-a9f8-477d-ab77-81c5f94ecddb"],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
  "Preparing", " ", "data", " ", "for", " ", "performance", " ", "check", " ",
    "and", " ", "heart", " ", "rate", " ", "calculation"}], "*)"}]], "Input",
 CellChangeTimes->{{3.75278014491088*^9, 3.7527801619617925`*^9}, {
  3.7527808319218388`*^9, 
  3.7527808322876396`*^9}},ExpressionUUID->"1d6a7a64-2538-4e4d-9ae9-\
f7db220e711d"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"signalwindow1", "=", 
    RowBox[{"ConstantArray", "[", 
     RowBox[{"0", ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Length", "[", 
         RowBox[{"Transpose", "[", "signalpadded1", "]"}], "]"}], ",", "71"}],
        "}"}]}], "]"}]}], ";"}], " ", 
  RowBox[{"(*", 
   RowBox[{"pre", "-", 
    RowBox[{
    "assigning", " ", "dimensions", " ", "to", " ", "signal", " ", "window", 
     " ", "such", " ", "that", " ", "data", " ", "frame", " ", "length", " ", 
     "is", " ", "71"}]}], "*)"}]}]], "Input",
 CellChangeTimes->{{3.752222834789852*^9, 3.752222873395445*^9}, {
  3.7522230818716936`*^9, 3.752223087447007*^9}, {3.7522438711229315`*^9, 
  3.752243875576547*^9}, {3.752772218744034*^9, 3.7527722232512865`*^9}, {
  3.752780166228221*^9, 3.7527801900447817`*^9}},
 CellLabel->"In[29]:=",ExpressionUUID->"6248a822-4cb1-4a1e-9972-075fbdd89a58"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"RR1", "=", 
    RowBox[{"ConstantArray", "[", 
     RowBox[{"0", ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", 
        RowBox[{"Length", "[", 
         RowBox[{"Transpose", "[", "signalpadded1", "]"}], "]"}]}], "}"}]}], 
     "]"}]}], ";"}], 
  RowBox[{"(*", 
   RowBox[{"For", " ", "storing", " ", "heartrate", " ", "data"}], 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.7522228839056063`*^9, 3.7522229175011225`*^9}, 
   3.7522231218168983`*^9, {3.7522438828701787`*^9, 3.752243887039593*^9}, {
   3.7527722256845074`*^9, 3.752772236241967*^9}, {3.7527801958056235`*^9, 
   3.7527802121707425`*^9}, {3.752780243127564*^9, 3.752780251077405*^9}},
 CellLabel->"In[30]:=",ExpressionUUID->"14184a4a-1808-43a8-9072-802a45fcf46a"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"j1", "=", 
    RowBox[{"ConstantArray", "[", 
     RowBox[{"0", ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", 
        RowBox[{"Length", "[", 
         RowBox[{"Transpose", "[", "signalpadded1", "]"}], "]"}]}], "}"}]}], 
     "]"}]}], ";"}], 
  RowBox[{"(*", 
   RowBox[{"loop", " ", "variable"}], "*)"}]}]], "Input",
 CellChangeTimes->{{3.75222293101883*^9, 3.7522229411239853`*^9}, 
   3.7522231254015074`*^9, {3.752243894527421*^9, 3.752243897789034*^9}, {
   3.752772229593541*^9, 3.7527722386967793`*^9}, {3.7527802144607563`*^9, 
   3.752780219468189*^9}},
 CellLabel->"In[31]:=",ExpressionUUID->"0a0d012e-dd7b-4f34-9960-3705b3ee72fb"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"plotposition1", "=", 
    RowBox[{"ConstantArray", "[", 
     RowBox[{"0", ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", 
        RowBox[{"Length", "[", 
         RowBox[{"Transpose", "[", "signalpadded1", "]"}], "]"}]}], "}"}]}], 
     "]"}]}], ";"}], 
  RowBox[{"(*", 
   RowBox[{
   "plotting", " ", "position", " ", "variable", " ", "for", " ", 
    "animating"}], "*)"}]}]], "Input",
 CellChangeTimes->{{3.752226032187445*^9, 3.7522260453471804`*^9}, {
  3.7522439038870535`*^9, 3.752243907408466*^9}, {3.7527722415073967`*^9, 
  3.752772241719599*^9}, {3.7527730482393274`*^9, 3.7527730487725306`*^9}, {
  3.752780222143216*^9, 3.7527802330386915`*^9}},
 CellLabel->"In[32]:=",ExpressionUUID->"e867681d-b0b8-4332-b62d-83d5af7e6265"],

Cell["Warning-The code that follows  has a lengthy evaluation time", "Text",
 CellChangeTimes->{{3.7527818973539295`*^9, 
  3.7527819396552734`*^9}},ExpressionUUID->"2f964c36-0e0f-4ad0-8d92-\
cbad06cbf489"],

Cell[BoxData[
 RowBox[{
  RowBox[{"For", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"i", "=", "1"}], ";", 
     RowBox[{"setval", "=", "0"}]}], ",", 
    RowBox[{"i", "\[LessEqual]", 
     RowBox[{
      RowBox[{"Length", "[", 
       RowBox[{"Transpose", "[", "signalpadded1", "]"}], "]"}], "-", "71"}]}],
     ",", 
    RowBox[{"i", "++"}], ",", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"signalwindow1", "[", 
        RowBox[{"[", "i", "]"}], "]"}], "[", 
       RowBox[{"[", "All", "]"}], "]"}], "=", 
      RowBox[{
       RowBox[{"signalpadded1", "[", 
        RowBox[{"[", "1", "]"}], "]"}], "[", 
       RowBox[{"[", 
        RowBox[{"i", ";;", 
         RowBox[{"i", "+", "70"}]}], "]"}], "]"}]}], ";", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"classifier1", "[", 
         RowBox[{
          RowBox[{"signalwindow1", "[", 
           RowBox[{"[", "i", "]"}], "]"}], "[", 
          RowBox[{"[", "All", "]"}], "]"}], "]"}], "\[Equal]", "1."}], ",", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"RR1", "[", 
           RowBox[{"[", "1", "]"}], "]"}], "[", 
          RowBox[{"[", "i", "]"}], "]"}], "=", 
         RowBox[{"60", "/", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"i", "-", "setval"}], ")"}], "/", "125"}], ")"}]}]}], 
        ";", 
        RowBox[{"setval", "=", "i"}], ";", 
        RowBox[{
         RowBox[{
          RowBox[{"plotposition1", "[", 
           RowBox[{"[", "1", "]"}], "]"}], "[", 
          RowBox[{"[", "i", "]"}], "]"}], "=", "36"}], ";", 
        RowBox[{
         RowBox[{
          RowBox[{"j1", "[", 
           RowBox[{"[", "1", "]"}], "]"}], "[", 
          RowBox[{"[", "i", "]"}], "]"}], "=", "1"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"j1", "[", 
           RowBox[{"[", "1", "]"}], "]"}], "[", 
          RowBox[{"[", "i", "]"}], "]"}], "=", "0"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"plotposition1", "[", 
             RowBox[{"[", "1", "]"}], "]"}], "[", 
            RowBox[{"[", 
             RowBox[{"i", "-", "1"}], "]"}], "]"}], "\[NotEqual]", "0"}], ",", 
          RowBox[{
           RowBox[{
            RowBox[{"plotposition1", "[", 
             RowBox[{"[", "1", "]"}], "]"}], "[", 
            RowBox[{"[", "i", "]"}], "]"}], "=", 
           RowBox[{
            RowBox[{
             RowBox[{"plotposition1", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "[", 
             RowBox[{"[", 
              RowBox[{"i", "-", "1"}], "]"}], "]"}], "-", "1"}]}], ","}], 
         "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"i", "\[NotEqual]", "1"}], ",", 
          RowBox[{
           RowBox[{
            RowBox[{"RR1", "[", 
             RowBox[{"[", "1", "]"}], "]"}], "[", 
            RowBox[{"[", "i", "]"}], "]"}], "=", 
           RowBox[{
            RowBox[{"RR1", "[", 
             RowBox[{"[", "1", "]"}], "]"}], "[", 
            RowBox[{"[", 
             RowBox[{"i", "-", "1"}], "]"}], "]"}]}], ","}], "]"}]}]}], 
      "]"}]}]}], "]"}], ";"}]], "Input",
 CellChangeTimes->{
  3.752217867607428*^9, {3.752218180088408*^9, 3.7522183195881577`*^9}, {
   3.7522183600544643`*^9, 3.752218378236909*^9}, {3.752218475906754*^9, 
   3.7522185468081303`*^9}, {3.752218590470722*^9, 3.7522186302711215`*^9}, {
   3.7522189377220316`*^9, 3.752218946182162*^9}, {3.7522190949319468`*^9, 
   3.7522191020245557`*^9}, {3.7522197573377914`*^9, 3.752219839714037*^9}, {
   3.7522210316078463`*^9, 3.752221038700455*^9}, {3.7522211855302105`*^9, 
   3.7522212261832905`*^9}, {3.75222151831781*^9, 3.752221520110326*^9}, {
   3.752221574136155*^9, 3.7522216443947344`*^9}, {3.7522225593556304`*^9, 
   3.752222599893753*^9}, {3.7522226382743425`*^9, 3.7522226747423935`*^9}, {
   3.752222782536549*^9, 3.7522227979342856`*^9}, {3.752222951404143*^9, 
   3.752222963169324*^9}, {3.752222994702142*^9, 3.752222999416456*^9}, {
   3.7522233774193773`*^9, 3.752223390417411*^9}, {3.7522237638956156`*^9, 
   3.7522237648154173`*^9}, {3.7522241780510983`*^9, 
   3.7522241934525394`*^9}, {3.752224252391296*^9, 3.7522242655977297`*^9}, {
   3.752224401491984*^9, 3.752224403393489*^9}, {3.7522252157785206`*^9, 
   3.75222523174936*^9}, {3.752225717096133*^9, 3.7522257398849916`*^9}, {
   3.752226077309365*^9, 3.752226204840597*^9}, {3.7522439180453005`*^9, 
   3.7522439662779045`*^9}, {3.75277224766883*^9, 3.752772284346633*^9}, {
   3.7527730623768277`*^9, 3.75277306295743*^9}},
 CellLabel->"In[33]:=",ExpressionUUID->"177af851-9a89-43f5-9ed9-984c28a4051e"],

Cell["\<\
The results obtained from the previous step are plotted and animated. The \
green signal is the PPG signal while the red circle indicates the position \
and time instant of event occurrence.\
\>", "Text",
 CellChangeTimes->{{3.752780254861022*^9, 
  3.7527803039042797`*^9}},ExpressionUUID->"0dc7dce8-ebb9-49b3-9fba-\
264eb20ce937"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Animate", "[", 
  RowBox[{
   RowBox[{"If", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"plotposition1", "[", 
        RowBox[{"[", "1", "]"}], "]"}], "[", 
       RowBox[{"[", "i", "]"}], "]"}], "\[NotEqual]", "0"}], ",", 
     RowBox[{"Show", "[", 
      RowBox[{
       RowBox[{"ListPlot", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"signalwindow1", "[", 
           RowBox[{"[", "i", "]"}], "]"}], "[", 
          RowBox[{"[", "All", "]"}], "]"}], ",", 
         RowBox[{"Joined", "\[Rule]", " ", "True"}], ",", 
         RowBox[{"PlotRange", "\[Rule]", " ", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"0", ",", "71"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"0", ",", "150"}], "}"}]}], "}"}]}], ",", 
         RowBox[{"PlotStyle", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"Directive", "[", 
            RowBox[{"Green", ",", "Thick"}], "]"}], "}"}]}], ",", 
         RowBox[{"AxesStyle", "\[Rule]", 
          RowBox[{"Directive", "[", 
           RowBox[{"Black", ",", "12", ",", "Thick"}], "]"}]}]}], "]"}], ",", 
       RowBox[{"ListPlot", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{
             RowBox[{"plotposition1", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "[", 
             RowBox[{"[", "i", "]"}], "]"}], ",", 
            RowBox[{
             RowBox[{"signalwindow1", "[", 
              RowBox[{"[", "i", "]"}], "]"}], "[", 
             RowBox[{"[", 
              RowBox[{
               RowBox[{"plotposition1", "[", 
                RowBox[{"[", "1", "]"}], "]"}], "[", 
               RowBox[{"[", "i", "]"}], "]"}], "]"}], "]"}]}], "}"}], "}"}], 
         ",", 
         RowBox[{"PlotMarkers", "\[Rule]", 
          RowBox[{"Graphics", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"Red", ",", 
              RowBox[{"Circle", "[", "]"}]}], "}"}], ",", 
            RowBox[{"ImageSize", "\[Rule]", "10"}]}], "]"}]}]}], "]"}], ",", 
       RowBox[{"Graphics", "[", 
        RowBox[{"Text", "[", 
         RowBox[{
          RowBox[{"\"\<Heartrate = \>\"", "<>", 
           RowBox[{"ToString", "@", 
            RowBox[{"N", "[", 
             RowBox[{
              RowBox[{"RR1", "[", 
               RowBox[{"[", "1", "]"}], "]"}], "[", 
              RowBox[{"[", "i", "]"}], "]"}], "]"}]}], "<>", "\"\<bpm\>\""}], 
          ",", 
          RowBox[{"{", 
           RowBox[{"55", ",", "40"}], "}"}], ",", 
          RowBox[{"BaseStyle", "\[Rule]", " ", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"FontWeight", "\[Rule]", "\"\<Bold\>\""}], ",", 
             RowBox[{"FontSize", "\[Rule]", "12"}]}], "}"}]}]}], "]"}], 
        "]"}]}], "]"}], ",", 
     RowBox[{"Show", "[", 
      RowBox[{
       RowBox[{"ListPlot", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"signalwindow1", "[", 
           RowBox[{"[", "i", "]"}], "]"}], "[", 
          RowBox[{"[", "All", "]"}], "]"}], ",", 
         RowBox[{"Joined", "\[Rule]", " ", "True"}], ",", 
         RowBox[{"PlotRange", "\[Rule]", " ", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"0", ",", "71"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"0", ",", "150"}], "}"}]}], "}"}]}], ",", 
         RowBox[{"PlotStyle", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"Directive", "[", 
            RowBox[{"Green", ",", "Thick"}], "]"}], "}"}]}], ",", 
         RowBox[{"AxesStyle", "\[Rule]", 
          RowBox[{"Directive", "[", 
           RowBox[{"Black", ",", "12", ",", "Thick"}], "]"}]}]}], "]"}], ",", 
       RowBox[{"Graphics", "[", 
        RowBox[{"Text", "[", 
         RowBox[{
          RowBox[{"\"\<Heartrate = \>\"", "<>", 
           RowBox[{"ToString", "@", 
            RowBox[{"N", "[", 
             RowBox[{
              RowBox[{"RR1", "[", 
               RowBox[{"[", "1", "]"}], "]"}], "[", 
              RowBox[{"[", "i", "]"}], "]"}], "]"}]}], "<>", "\"\<bpm\>\""}], 
          ",", 
          RowBox[{"{", 
           RowBox[{"55", ",", "40"}], "}"}], ",", 
          RowBox[{"BaseStyle", "\[Rule]", " ", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"FontWeight", "\[Rule]", "\"\<Bold\>\""}], ",", 
             RowBox[{"FontSize", "\[Rule]", "12"}]}], "}"}]}]}], "]"}], 
        "]"}]}], "]"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", "1", ",", 
     RowBox[{
      RowBox[{"Length", "[", "signalwindow1", "]"}], "-", "71"}], ",", "1", 
     ",", 
     RowBox[{"AnimationRate", "\[Rule]", "35"}], ",", 
     RowBox[{"Appearance", "\[Rule]", "\"\<Open\>\""}]}], "}"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.752229076823036*^9, 3.7522290777876387`*^9}, {
   3.7522291115041947`*^9, 3.7522292449941735`*^9}, {3.7522293206478972`*^9, 
   3.75222932397291*^9}, {3.7522294917594213`*^9, 3.752229591857267*^9}, {
   3.75222965438494*^9, 3.752229656602748*^9}, {3.752229731384883*^9, 
   3.752229736029704*^9}, {3.7522298058566236`*^9, 3.7522298493766184`*^9}, 
   3.7522299459944077`*^9, 3.7522299870129886`*^9, {3.7522300739149833`*^9, 
   3.7522301707842054`*^9}, {3.7522302712742796`*^9, 
   3.7522302999563894`*^9}, {3.7522303333837748`*^9, 
   3.7522304095291567`*^9}, {3.7522304506868896`*^9, 3.75223048090917*^9}, {
   3.752230524560376*^9, 3.752230563288162*^9}, {3.7522306122552447`*^9, 
   3.752230638240748*^9}, {3.752243994641367*^9, 3.7522440269514637`*^9}, {
   3.7522441728775516`*^9, 3.7522441892847843`*^9}, {3.7522442760446196`*^9, 
   3.7522442816378307`*^9}, {3.752772287190649*^9, 3.752772312989594*^9}, {
   3.75277334580919*^9, 3.7527733487352057`*^9}},
 CellLabel->"In[34]:=",ExpressionUUID->"5bc6fbd8-9e7a-49f5-a61f-62f32fdaea65"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`i$$ = 87, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[$CellContext`i$$], 1, 34567, 1}}, Typeset`size$$ = {
    259.2, {81., 82.9613531148}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = True}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`i$$ = 1}, 
      "ControllerVariables" :> {}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> If[Part[
          Part[$CellContext`plotposition1, 1], $CellContext`i$$] != 0, 
        Show[
         ListPlot[
          Part[
           Part[$CellContext`signalwindow1, $CellContext`i$$], All], Joined -> 
          True, PlotRange -> {{0, 71}, {0, 150}}, PlotStyle -> {
            Directive[Green, Thick]}, AxesStyle -> 
          Directive[Black, 12, Thick]], 
         ListPlot[{{
            Part[
             Part[$CellContext`plotposition1, 1], $CellContext`i$$], 
            Part[
             Part[$CellContext`signalwindow1, $CellContext`i$$], 
             Part[
              Part[$CellContext`plotposition1, 1], $CellContext`i$$]]}}, 
          PlotMarkers -> Graphics[{Red, 
             Circle[]}, ImageSize -> 10]], 
         Graphics[
          Text[
           StringJoin["Heartrate = ", 
            ToString[
             N[
              Part[
               Part[$CellContext`RR1, 1], $CellContext`i$$]]], "bpm"], {55, 
           40}, BaseStyle -> {FontWeight -> "Bold", FontSize -> 12}]]], 
        Show[
         ListPlot[
          Part[
           Part[$CellContext`signalwindow1, $CellContext`i$$], All], Joined -> 
          True, PlotRange -> {{0, 71}, {0, 150}}, PlotStyle -> {
            Directive[Green, Thick]}, AxesStyle -> 
          Directive[Black, 12, Thick]], 
         Graphics[
          Text[
           StringJoin["Heartrate = ", 
            ToString[
             N[
              Part[
               Part[$CellContext`RR1, 1], $CellContext`i$$]]], "bpm"], {55, 
           40}, BaseStyle -> {FontWeight -> "Bold", FontSize -> 12}]]]], 
      "Specifications" :> {{$CellContext`i$$, 1, 34567, 1, AnimationRate -> 
         35, Appearance -> "Open", 
         AppearanceElements -> {
          "ProgressSlider", "PlayPauseButton", "FasterSlowerButtons", 
           "DirectionButton"}}}, 
      "Options" :> {
       ControlType -> Animator, AppearanceElements -> None, DefaultBaseStyle -> 
        "Animate", DefaultLabelStyle -> "AnimateLabel", SynchronousUpdating -> 
        True, ShrinkingDelay -> 10.}, "DefaultOptions" :> {}],
     ImageSizeCache->{295., {107., 110.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Animate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{
  3.752229078667042*^9, 3.7522291341186914`*^9, 3.7522292485301857`*^9, 
   3.752229325098914*^9, {3.7522295146349277`*^9, 3.752229529491391*^9}, 
   3.752229594061276*^9, 3.752229659667362*^9, 3.7522297401705217`*^9, 
   3.752229832028741*^9, 3.7522300484820585`*^9, {3.7522300974020815`*^9, 
   3.7522301376528635`*^9}, 3.752230172204812*^9, 3.752230282122713*^9, 
   3.7522303413870115`*^9, 3.7522303867666206`*^9, 3.7522304871916018`*^9, {
   3.752230541685258*^9, 3.752230564700971*^9}, {3.75223061603446*^9, 
   3.752230640515757*^9}, 3.7522441444448395`*^9, 3.7522441918677893`*^9, 
   3.752244283299434*^9, 3.752249416662127*^9, 3.752773293895549*^9, 
   3.752773350356816*^9, 3.75290925732624*^9, 3.8168632028717813`*^9},
 CellLabel->"Out[34]=",ExpressionUUID->"9b0e17cb-c793-4cf0-a1f5-a03a95275d7f"]
}, Open  ]],

Cell["\<\


\
\>", "Text",
 CellChangeTimes->{{3.7527633614741836`*^9, 3.7527633751274753`*^9}, 
   3.7527800325713167`*^9},ExpressionUUID->"b1e4a781-c143-4ae9-aa33-\
36ffb4258b72"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Heart Rate detection from Electrocardiogram (ECG) signals", "Section",
 CellChangeTimes->{{3.752780042378155*^9, 
  3.7527800576280975`*^9}},ExpressionUUID->"306eb2e9-91f6-41e9-81a8-\
416945f1f9ce"],

Cell["\<\
Electrocardiography (ECG) is the process of recording the electrical activity \
of the heart over a period of time using electrodes placed over the skin. \
These electrodes detect the tiny electrical changes on the skin that arise \
from the heart muscle\[CloseCurlyQuote]s electrophysiologic pattern of \
depolarizing and repolarizing during each heartbeat. There are three main \
components to an ECG: the P wave, which represents the depolarization of the \
atria; the QRS complex, which represents the depolarization of the \
ventricles; and the T wave, which represents the repolarization of the \
ventricles. Detecting any one of these waves is sufficient to calculate heart \
rate but most commonly the R peak is preferred for detection due to its high \
energy content.\
\>", "Text",
 CellChangeTimes->{{3.752778235372159*^9, 3.7527783704696913`*^9}, 
   3.7527803206265745`*^9, {3.752780371643297*^9, 
   3.7527804644125075`*^9}},ExpressionUUID->"494c664c-ef7b-4346-9e6c-\
d5389d15d3f8"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
    "], {{0, 197}, {380, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSizeRaw->{380, 197},
  PlotRange->{{0, 380}, {0, 197}}]], "Input",
 CellChangeTimes->{{3.7527804675261335`*^9, 
  3.7527804797608013`*^9}},ExpressionUUID->"eeb568fb-4ac2-4805-96fa-\
10ea558fc273"],

Cell["Import ECG Data ", "Text",
 CellChangeTimes->{{3.75278048981087*^9, 
  3.7527805146146593`*^9}},ExpressionUUID->"bd57cc26-cf07-48f4-bfda-\
446f1e3c286a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Datalong2", "=", 
   RowBox[{
   "Import", "[", 
    "\"\<C:\\\\Users\\\\Arlene \
John\\\\Desktop\\\\data\\\\ecg_continuous.mat\>\"", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7523307085944266`*^9, 3.7523307261552644`*^9}, {
  3.75233693986461*^9, 3.7523369400724106`*^9}, {3.752340669843255*^9, 
  3.75234067627029*^9}, {3.7527524597051673`*^9, 3.7527524829818344`*^9}, {
  3.7527634386540155`*^9, 3.7527634525499287`*^9}, {3.816862993103732*^9, 
  3.816862994573801*^9}},
 CellLabel->"In[37]:=",ExpressionUUID->"aeda376c-5259-4449-8d26-b6b56ce1b286"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Datalong2", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"Datalong2", "[", 
      RowBox[{"[", "1", "]"}], "]"}], "[", 
     RowBox[{"[", "All", "]"}], "]"}], "[", 
    RowBox[{"[", "All", "]"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.752331089703908*^9, 3.7523310932284155`*^9}, {
  3.752763455701548*^9, 3.752763458088973*^9}},
 CellLabel->"In[38]:=",ExpressionUUID->"70b17543-c0e4-4bfb-84c2-8b26f123e371"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Datalong2", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Datalong2", "[", 
       RowBox[{"[", "i", "]"}], "]"}], "[", 
      RowBox[{"[", "1", "]"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", 
       RowBox[{"Length", "[", "Datalong2", "]"}]}], "}"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.7527634615689993`*^9, 3.7527634688840237`*^9}},
 CellLabel->"In[39]:=",ExpressionUUID->"02528e5b-da52-480c-a19c-a9a03893c44a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Datalong2", "=", 
   RowBox[{"stackdata", "[", 
    RowBox[{"Datalong2", ",", "71"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7523312663742714`*^9, 3.7523312923594265`*^9}, {
   3.7523326134904594`*^9, 3.752332621610075*^9}, {3.752332685996112*^9, 
   3.75233269029742*^9}, 3.752333127860423*^9, {3.752333273525421*^9, 
   3.7523332752408247`*^9}, {3.752333356909691*^9, 3.752333357112491*^9}, {
   3.7523334243688326`*^9, 3.7523334748248363`*^9}, 3.7527587346657815`*^9, {
   3.752763472662636*^9, 3.752763475114854*^9}},
 CellLabel->"In[40]:=",ExpressionUUID->"a2d09389-fae0-47e6-8d5b-a9bd4405abee"],

Cell["\<\
The labels are the same as that imported for PPG signals as the data was \
obtained from a single patient simultaneously.\
\>", "Text",
 CellChangeTimes->{{3.752780518395293*^9, 
  3.752780545340106*^9}},ExpressionUUID->"d9da7568-d079-4dc2-837f-\
bbb24b694642"],

Cell[BoxData[
 RowBox[{
  RowBox[{"labels2", "=", "labels"}], ";"}]], "Input",
 CellChangeTimes->{{3.7517151679246874`*^9, 3.7517152058407636`*^9}, {
   3.7521831852706833`*^9, 3.7521832179129887`*^9}, 3.7522424862267694`*^9, {
   3.7522425832273006`*^9, 3.7522425835139027`*^9}, {3.752355118240967*^9, 
   3.752355139190716*^9}, {3.752752637587802*^9, 3.7527526496093297`*^9}, 
   3.752758743283101*^9, 3.752761552430395*^9, 3.7527624622883425`*^9, 
   3.752762697752305*^9, {3.752763531311128*^9, 3.752763537925557*^9}, 
   3.752764179739076*^9, {3.752773451321285*^9, 3.752773457452311*^9}},
 CellLabel->"In[41]:=",ExpressionUUID->"e43725e6-c053-4b68-8c7c-df75f22da0e0"],

Cell["Preparing data as discussed in previous section", "Text",
 CellChangeTimes->{{3.752780553591956*^9, 
  3.7527805656856203`*^9}},ExpressionUUID->"7df1814d-f0f0-4f54-9625-\
90599b8b2940"],

Cell[BoxData[
 RowBox[{
  RowBox[{"T", "=", 
   RowBox[{"deleting", "[", 
    RowBox[{"Datalong2", ",", "labels2"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7527573338442235`*^9, 3.7527573506549644`*^9}, {
  3.7527578517497945`*^9, 3.7527578519650946`*^9}, {3.752758504376829*^9, 
  3.752758505082031*^9}, {3.752758709189822*^9, 3.75275871294023*^9}, {
  3.752763565162089*^9, 3.752763567407501*^9}},
 CellLabel->"In[42]:=",ExpressionUUID->"23187594-b63c-4a71-8c4d-daf9e342b80d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Datalongstack1", "=", 
   RowBox[{"T", "[", 
    RowBox[{"[", 
     RowBox[{"All", ",", 
      RowBox[{"1", ";;", 
       RowBox[{"-", "2"}]}]}], "]"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7527587815008907`*^9, 3.7527588343351154`*^9}, {
   3.752759002246423*^9, 3.7527590066805353`*^9}, 3.752763771723553*^9},
 CellLabel->"In[43]:=",ExpressionUUID->"023ec8f2-cdec-462f-a47b-f9c255c01874"],

Cell[BoxData[
 RowBox[{
  RowBox[{"label1", "=", 
   RowBox[{"T", "[", 
    RowBox[{"[", 
     RowBox[{"All", ",", 
      RowBox[{"-", "1"}]}], "]"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7527588191303806`*^9, 3.752758838262225*^9}, {
   3.7527590250556803`*^9, 3.7527590255486813`*^9}, {3.7527602359298325`*^9, 
   3.7527602403925495`*^9}, 3.7527637745087123`*^9},
 CellLabel->"In[44]:=",ExpressionUUID->"23d4ee94-4d9a-4070-a7f6-c05c420a56e9"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"label1", "[", 
    RowBox[{"[", "1", "]"}], "]"}], "=", "0."}], ";"}]], "Input",
 CellChangeTimes->{{3.7527646775194893`*^9, 3.752764688444332*^9}},
 CellLabel->"In[45]:=",ExpressionUUID->"67786274-f7c6-4e73-b885-bd94a292897c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"trainingdata2", "=", 
   RowBox[{
    RowBox[{"Datalongstack1", "[", 
     RowBox[{"[", 
      RowBox[{"1", ";;", 
       RowBox[{
        RowBox[{"Ceiling", "[", 
         RowBox[{"0.7", "*", 
          RowBox[{"Length", "[", "Datalongstack", "]"}]}], "]"}], "+", 
        "20"}]}], "]"}], "]"}], "[", 
    RowBox[{"[", "All", "]"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.751718143697261*^9, 3.75171822503541*^9}, {
   3.751718279294508*^9, 3.7517182799965096`*^9}, {3.752183288555978*^9, 
   3.75218328948178*^9}, {3.7521891242563963`*^9, 3.7521891264212008`*^9}, {
   3.752242520308691*^9, 3.7522425219574966`*^9}, {3.752355186589724*^9, 
   3.752355194141141*^9}, {3.752759432264575*^9, 3.752759432555376*^9}, {
   3.75276377656283*^9, 3.7527637802250395`*^9}, 3.752780597157626*^9},
 CellLabel->"In[46]:=",ExpressionUUID->"8c874e01-54c7-44fa-b574-ac2dcad44d69"],

Cell[BoxData[
 RowBox[{
  RowBox[{"testdata2", "=", 
   RowBox[{
    RowBox[{"Datalongstack1", "[", 
     RowBox[{"[", 
      RowBox[{
       RowBox[{
        RowBox[{"Ceiling", "[", 
         RowBox[{"0.7", "*", 
          RowBox[{"Length", "[", "Datalongstack", "]"}]}], "]"}], "+", "21"}],
        ";;"}], " ", "]"}], "]"}], "[", 
    RowBox[{"[", "All", "]"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7517182345398273`*^9, 3.7517182854429193`*^9}, {
   3.7521832948835974`*^9, 3.7521832957097993`*^9}, 3.7521891107739687`*^9, {
   3.752242525406309*^9, 3.7522425276149178`*^9}, {3.752355201635359*^9, 
   3.752355203881365*^9}, {3.752759437685391*^9, 3.7527594379711914`*^9}, {
   3.7527637845392857`*^9, 3.7527638120508595`*^9}, {3.7527806013876605`*^9, 
   3.752780602855666*^9}},
 CellLabel->"In[47]:=",ExpressionUUID->"afe717e0-e997-4799-8779-80f3a82ec2ad"],

Cell[BoxData[
 RowBox[{
  RowBox[{"traininglabel2", "=", 
   RowBox[{
    RowBox[{"label1", "[", 
     RowBox[{"[", 
      RowBox[{"1", ";;", 
       RowBox[{
        RowBox[{"Ceiling", "[", 
         RowBox[{"0.7", "*", 
          RowBox[{"Length", "[", "Datalongstack", "]"}]}], "]"}], "+", 
        "20"}]}], "]"}], "]"}], "[", 
    RowBox[{"[", "All", "]"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7517182881527243`*^9, 3.7517183028287506`*^9}, {
   3.7521833000654144`*^9, 3.752183300750018*^9}, {3.7521891286308055`*^9, 
   3.7521891292100067`*^9}, {3.752242531346933*^9, 3.7522425329953413`*^9}, 
   3.752355212583085*^9, {3.752759440121697*^9, 3.752759440386897*^9}, {
   3.7527637912286687`*^9, 3.75276380891068*^9}, 3.75278060634709*^9},
 CellLabel->"In[48]:=",ExpressionUUID->"3807a84b-a0e6-4915-9758-ddea4d48e336"],

Cell[BoxData[
 RowBox[{
  RowBox[{"testlabel2", "=", 
   RowBox[{
    RowBox[{"label1", "[", 
     RowBox[{"[", 
      RowBox[{
       RowBox[{
        RowBox[{"Ceiling", "[", 
         RowBox[{"0.7", "*", 
          RowBox[{"Length", "[", "Datalongstack", "]"}]}], "]"}], "+", "21"}],
        ";;"}], " ", "]"}], "]"}], "[", 
    RowBox[{"[", "All", "]"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7517183052965555`*^9, 3.7517183193249807`*^9}, {
   3.7521833050430346`*^9, 3.7521833057036366`*^9}, {3.752189132395813*^9, 
   3.752189134861018*^9}, {3.752242536536565*^9, 3.7522425383753724`*^9}, 
   3.752355216166994*^9, {3.752759443838909*^9, 3.7527594440573096`*^9}, {
   3.7527637971910095`*^9, 3.7527638152490425`*^9}, {3.752780609939312*^9, 
   3.752780611564521*^9}},
 CellLabel->"In[49]:=",ExpressionUUID->"d7a4d289-69cd-40b5-a8d8-0846510842f6"],

Cell["\<\
Classifier chosen as discussed in previous section with PolynomialDegree 3.\
\>", "Text",
 CellChangeTimes->{{3.752780621626586*^9, 
  3.752780651416195*^9}},ExpressionUUID->"366a17ec-08e6-41b8-aef1-\
97a4cc9a68ae"],

Cell[BoxData[
 RowBox[{
  RowBox[{"classifier2", "=", 
   RowBox[{"Classify", "[", 
    RowBox[{
     RowBox[{"trainingdata2", "\[Rule]", " ", "traininglabel2"}], ",", 
     RowBox[{"Method", "\[Rule]", " ", 
      RowBox[{"{", 
       RowBox[{"\"\<SupportVectorMachine\>\"", ",", 
        RowBox[{"\"\<KernelType\>\"", "\[Rule]", " ", "\"\<Polynomial\>\""}], 
        ",", 
        RowBox[{"\"\<PolynomialDegree\>\"", "\[Rule]", " ", "3"}]}], 
       "}"}]}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7517183391826167`*^9, 3.7517184170418987`*^9}, {
   3.7517200150407877`*^9, 3.751720036175997*^9}, {3.75218332098409*^9, 
   3.7521833321559296`*^9}, {3.7522425432147818`*^9, 3.752242550464398*^9}, {
   3.7523542830313764`*^9, 3.7523542859106827`*^9}, {3.7523543191476903`*^9, 
   3.752354320763893*^9}, {3.752354379536994*^9, 3.752354399562355*^9}, {
   3.752354494683588*^9, 3.7523544959646907`*^9}, {3.752354598812046*^9, 
   3.752354599317547*^9}, {3.752354676534233*^9, 3.7523546770646334`*^9}, {
   3.7523547340495644`*^9, 3.752354734614966*^9}, {3.7523548391773105`*^9, 
   3.7523548396491117`*^9}, {3.75235493877865*^9, 3.752354939286651*^9}, {
   3.752759424512455*^9, 3.752759424802656*^9}, {3.752759458311743*^9, 
   3.7527594612231517`*^9}, {3.752759741039012*^9, 3.7527597412886124`*^9}, {
   3.7527603097686367`*^9, 3.7527603124097443`*^9}, {3.7527603593065314`*^9, 
   3.752760364001943*^9}, 3.7527616187075863`*^9, {3.752761967294349*^9, 
   3.7527619816090865`*^9}, 3.7527624050004463`*^9, {3.7527625595970426`*^9, 
   3.752762559863243*^9}, {3.752762731230464*^9, 3.752762731559065*^9}, {
   3.7527627841007376`*^9, 3.7527627846933403`*^9}, {3.752762898013154*^9, 
   3.752762898940159*^9}, {3.7527629638464684`*^9, 3.752762964142869*^9}, {
   3.75276303973252*^9, 3.752763040169321*^9}, {3.7527631167493825`*^9, 
   3.7527631172835855`*^9}, {3.7527638178001885`*^9, 
   3.7527638277747593`*^9}, {3.75276391380568*^9, 3.752763914107697*^9}, {
   3.7527639650366096`*^9, 3.7527639657106485`*^9}, {3.7527643771781683`*^9, 
   3.7527644120913095`*^9}, {3.7527647669595127`*^9, 
   3.7527647674743133`*^9}, {3.7527661874533205`*^9, 3.752766189227124*^9}},
 CellLabel->"In[50]:=",ExpressionUUID->"82e59227-1e92-4d61-822b-21f6d21abc0e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"results2", "=", 
   RowBox[{"classifier2", "[", "testdata2", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7521833721330795`*^9, 3.7521833840493107`*^9}, {
  3.7522425548398066`*^9, 3.752242560846619*^9}, {3.752242766013702*^9, 
  3.7522427666275043`*^9}, {3.752759517660096*^9, 3.752759517963397*^9}, {
  3.7527597073944235`*^9, 3.752759711189434*^9}, {3.752763860373624*^9, 
  3.752763866729987*^9}, {3.752764851106001*^9, 3.7527648513182025`*^9}},
 CellLabel->"In[51]:=",ExpressionUUID->"f2388701-6c22-461e-9ebd-8797193ded50"],

Cell[BoxData[
 RowBox[{
  RowBox[{"joinmat", "=", 
   RowBox[{"beatbybeat", "[", 
    RowBox[{"testlabel2", ",", "results2", ",", "125"}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.7527620711045275`*^9, 3.7527621042024193`*^9}, {
  3.752762178988308*^9, 3.7527621800157127`*^9}, {3.752764828581708*^9, 
  3.752764831882926*^9}},
 CellLabel->"In[52]:=",ExpressionUUID->"df738b8d-cbe8-4645-b804-7e45564721cc"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Ck2", "=", 
  RowBox[{"confusionmatrix", "[", 
   RowBox[{"joinmat", ",", 
    RowBox[{"Max", "[", 
     RowBox[{
      RowBox[{"Length", "[", "testlabel2", "]"}], ",", 
      RowBox[{"Length", "[", "results2", "]"}]}], "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.752764892047409*^9, 3.7527649016406546`*^9}},
 CellLabel->"In[53]:=",ExpressionUUID->"db87b9ca-6431-4ac4-b6c5-9916c58616e4"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"10721", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"8", ",", "145"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.7527649021904573`*^9, {3.7527658387394557`*^9, 3.7527658585367656`*^9}, 
   3.752773668419718*^9, 3.7529093981720877`*^9, 3.816863299100272*^9},
 CellLabel->"Out[53]=",ExpressionUUID->"dc3363b1-c907-447e-bb1b-d997c3473383"]
}, Open  ]],

Cell["\<\
From the confusion matrix, we observer that the classifier exhibited a \
Sensitivity of 88.8% and specificity of 100%. Sensitivity is lower than that \
discussed in the section with PPG signals while specificity has reached 100%, \
indicating that there is scope for improvement. The classifier performance is \
checked and animated to simulate real-time peak detection conditions next\
\>", "Text",
 CellChangeTimes->{{3.752779658754572*^9, 3.7527796776729517`*^9}, {
  3.752779771607152*^9, 3.752779773819558*^9}, {3.752779823776408*^9, 
  3.752779845659988*^9}, {3.752779888990735*^9, 3.7527800252303915`*^9}, {
  3.75278006497182*^9, 3.752780107526856*^9}, {3.7527807077663956`*^9, 
  3.752780776782823*^9}},ExpressionUUID->"13c63c64-5ce5-44dd-8b59-\
7611f371a356"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"signal2", "=", 
    RowBox[{
    "Import", "[", 
     "\"\<C:\\\\Users\\\\Arlene \
John\\\\Desktop\\\\data\\\\ECG_signal.mat\>\"", "]"}]}], ";"}], 
  RowBox[{"(*", 
   RowBox[{
   "importing", " ", "ecg", " ", "signal", " ", "and", " ", "converting", " ",
     "to", " ", "a", " ", "signal", " ", "vector", " ", "with", " ", "zero", 
    " ", "padding"}], "*)"}]}]], "Input",
 CellChangeTimes->{{3.7522174766272483`*^9, 3.7522174933124886`*^9}, 
   3.7527723370827527`*^9, {3.752780809308467*^9, 3.752780813910527*^9}, {
   3.752782954527178*^9, 3.752782955614986*^9}, {3.8168633076420054`*^9, 
   3.816863309022314*^9}},
 CellLabel->"In[55]:=",ExpressionUUID->"62c56e60-05f5-41d9-9e48-fe570d844b41"],

Cell[BoxData[
 RowBox[{
  RowBox[{"signal2", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"signal2", "[", 
      RowBox[{"[", "1", "]"}], "]"}], "[", 
     RowBox[{"[", "All", "]"}], "]"}], "[", 
    RowBox[{"[", "All", "]"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7522175713713846`*^9, 3.7522175774572*^9}, 
   3.7527723409465723`*^9, 3.752773686938002*^9},
 CellLabel->"In[56]:=",ExpressionUUID->"a66601ae-a5b8-4b49-a4e8-8c388823a4e0"],

Cell[BoxData[
 RowBox[{
  RowBox[{"signal2", "=", 
   RowBox[{"Transpose", "[", "signal2", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7522175314198847`*^9, 3.7522175401110053`*^9}, 
   3.7527723434185796`*^9, 3.7527736905906196`*^9},
 CellLabel->"In[57]:=",ExpressionUUID->"b0bcd5c0-4a84-495a-aed3-97e35033979c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"signalpadded2", "=", 
   RowBox[{"ArrayPad", "[", 
    RowBox[{"signal2", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"70", ",", "0"}], "}"}]}], "}"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.752217944719022*^9, 3.7522179777859044`*^9}, {
  3.752218103067713*^9, 3.7522181477820253`*^9}, {3.7527723457119904`*^9, 
  3.752772348009803*^9}},
 CellLabel->"In[58]:=",ExpressionUUID->"22412fba-f807-4c79-ad7a-6a4f2cdb08e8"],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
  "Preparing", " ", "data", " ", "for", " ", "performance", " ", "check", " ",
    "and", " ", "heart", " ", "rate", " ", "calculation"}], "*)"}]], "Input",E\
xpressionUUID->"5b24983f-0ba4-411b-9f34-ccc8bc5e55a8"],

Cell[BoxData[
 RowBox[{
  RowBox[{"signalwindow2", "=", 
   RowBox[{"ConstantArray", "[", 
    RowBox[{"0", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Length", "[", 
        RowBox[{"Transpose", "[", "signalpadded2", "]"}], "]"}], ",", "71"}], 
      "}"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.752222834789852*^9, 3.752222873395445*^9}, {
  3.7522230818716936`*^9, 3.752223087447007*^9}, {3.7527723504270134`*^9, 
  3.7527723539010305`*^9}},
 CellLabel->"In[59]:=",ExpressionUUID->"d5071f78-3437-4f22-a90e-0a48770b3f13"],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{"pre", "-", 
   RowBox[{
   "assigning", " ", "dimensions", " ", "to", " ", "signal", " ", "window", 
    " ", "such", " ", "that", " ", "data", " ", "frame", " ", "length", " ", 
    "is", " ", "71"}]}], "*)"}]], "Input",ExpressionUUID->"6837dd52-49ad-456d-\
89c3-e067cd4563c7"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"RR2", "=", 
    RowBox[{"ConstantArray", "[", 
     RowBox[{"0", ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", 
        RowBox[{"Length", "[", 
         RowBox[{"Transpose", "[", "signalpadded2", "]"}], "]"}]}], "}"}]}], 
     "]"}]}], ";"}], " ", 
  RowBox[{"(*", 
   RowBox[{"to", " ", "store", " ", "hearrtrate", " ", "information"}], 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.7522228839056063`*^9, 3.7522229175011225`*^9}, 
   3.7522231218168983`*^9, {3.7522478600985165`*^9, 3.75224786452073*^9}, 
   3.7527720343829412`*^9, 3.7527723559484406`*^9, {3.7527808748027067`*^9, 
   3.7527808851580043`*^9}},
 CellLabel->"In[60]:=",ExpressionUUID->"c94ae273-12b7-4b6f-8842-6c81d29a0c48"],

Cell[BoxData[
 RowBox[{
  RowBox[{"j2", "=", 
   RowBox[{"ConstantArray", "[", 
    RowBox[{"0", ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", 
       RowBox[{"Length", "[", 
        RowBox[{"Transpose", "[", "signalpadded2", "]"}], "]"}]}], "}"}]}], 
    "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.75222293101883*^9, 3.7522229411239853`*^9}, 
   3.7522231254015074`*^9, {3.7527723592110577`*^9, 3.7527723618594675`*^9}},
 CellLabel->"In[61]:=",ExpressionUUID->"a9c4e7b1-d456-4e41-8e77-9ff117ea202a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"plotposition2", "=", 
   RowBox[{"ConstantArray", "[", 
    RowBox[{"0", ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", 
       RowBox[{"Length", "[", 
        RowBox[{"Transpose", "[", "signalpadded2", "]"}], "]"}]}], "}"}]}], 
    "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.752226032187445*^9, 3.7522260453471804`*^9}, {
  3.7527723644994802`*^9, 3.752772373696927*^9}},
 CellLabel->"In[62]:=",ExpressionUUID->"8fd95c09-c095-437d-867c-77e4c4152653"],

Cell["Warning-The code that follows  has a lengthy evaluation time", "Text",
 CellChangeTimes->{{3.7527818973539295`*^9, 
  3.7527819396552734`*^9}},ExpressionUUID->"7c97d67b-95ac-4b9c-a7df-\
23bf2acb104e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"For", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"i", "=", "1"}], ";", 
     RowBox[{"setval", "=", "0"}]}], ",", 
    RowBox[{"i", "\[LessEqual]", 
     RowBox[{
      RowBox[{"Length", "[", 
       RowBox[{"Transpose", "[", "signalpadded2", "]"}], "]"}], "-", "71"}]}],
     ",", 
    RowBox[{"i", "++"}], ",", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"signalwindow2", "[", 
        RowBox[{"[", "i", "]"}], "]"}], "[", 
       RowBox[{"[", "All", "]"}], "]"}], "=", 
      RowBox[{
       RowBox[{"signalpadded2", "[", 
        RowBox[{"[", "1", "]"}], "]"}], "[", 
       RowBox[{"[", 
        RowBox[{"i", ";;", 
         RowBox[{"i", "+", "70"}]}], "]"}], "]"}]}], ";", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"classifier2", "[", 
         RowBox[{
          RowBox[{"signalwindow2", "[", 
           RowBox[{"[", "i", "]"}], "]"}], "[", 
          RowBox[{"[", "All", "]"}], "]"}], "]"}], "\[Equal]", "1."}], ",", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"RR2", "[", 
           RowBox[{"[", "1", "]"}], "]"}], "[", 
          RowBox[{"[", "i", "]"}], "]"}], "=", 
         RowBox[{"60", "/", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"i", "-", "setval"}], ")"}], "/", "125"}], ")"}]}]}], 
        ";", 
        RowBox[{"setval", "=", "i"}], ";", 
        RowBox[{
         RowBox[{
          RowBox[{"plotposition2", "[", 
           RowBox[{"[", "1", "]"}], "]"}], "[", 
          RowBox[{"[", "i", "]"}], "]"}], "=", "36"}], ";", 
        RowBox[{
         RowBox[{
          RowBox[{"j2", "[", 
           RowBox[{"[", "1", "]"}], "]"}], "[", 
          RowBox[{"[", "i", "]"}], "]"}], "=", "1"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"j2", "[", 
           RowBox[{"[", "1", "]"}], "]"}], "[", 
          RowBox[{"[", "i", "]"}], "]"}], "=", "0"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"plotposition2", "[", 
             RowBox[{"[", "1", "]"}], "]"}], "[", 
            RowBox[{"[", 
             RowBox[{"i", "-", "1"}], "]"}], "]"}], "\[NotEqual]", "0"}], ",", 
          RowBox[{
           RowBox[{
            RowBox[{"plotposition2", "[", 
             RowBox[{"[", "1", "]"}], "]"}], "[", 
            RowBox[{"[", "i", "]"}], "]"}], "=", 
           RowBox[{
            RowBox[{
             RowBox[{"plotposition2", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "[", 
             RowBox[{"[", 
              RowBox[{"i", "-", "1"}], "]"}], "]"}], "-", "1"}]}], ","}], 
         "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"i", "\[NotEqual]", "1"}], ",", 
          RowBox[{
           RowBox[{
            RowBox[{"RR2", "[", 
             RowBox[{"[", "1", "]"}], "]"}], "[", 
            RowBox[{"[", "i", "]"}], "]"}], "=", 
           RowBox[{
            RowBox[{"RR2", "[", 
             RowBox[{"[", "1", "]"}], "]"}], "[", 
            RowBox[{"[", 
             RowBox[{"i", "-", "1"}], "]"}], "]"}]}], ","}], "]"}]}]}], 
      "]"}]}]}], "]"}], ";"}]], "Input",
 CellChangeTimes->{
  3.752217867607428*^9, {3.752218180088408*^9, 3.7522183195881577`*^9}, {
   3.7522183600544643`*^9, 3.752218378236909*^9}, {3.752218475906754*^9, 
   3.7522185468081303`*^9}, {3.752218590470722*^9, 3.7522186302711215`*^9}, {
   3.7522189377220316`*^9, 3.752218946182162*^9}, {3.7522190949319468`*^9, 
   3.7522191020245557`*^9}, {3.7522197573377914`*^9, 3.752219839714037*^9}, {
   3.7522210316078463`*^9, 3.752221038700455*^9}, {3.7522211855302105`*^9, 
   3.7522212261832905`*^9}, {3.75222151831781*^9, 3.752221520110326*^9}, {
   3.752221574136155*^9, 3.7522216443947344`*^9}, {3.7522225593556304`*^9, 
   3.752222599893753*^9}, {3.7522226382743425`*^9, 3.7522226747423935`*^9}, {
   3.752222782536549*^9, 3.7522227979342856`*^9}, {3.752222951404143*^9, 
   3.752222963169324*^9}, {3.752222994702142*^9, 3.752222999416456*^9}, {
   3.7522233774193773`*^9, 3.752223390417411*^9}, {3.7522237638956156`*^9, 
   3.7522237648154173`*^9}, {3.7522241780510983`*^9, 
   3.7522241934525394`*^9}, {3.752224252391296*^9, 3.7522242655977297`*^9}, {
   3.752224401491984*^9, 3.752224403393489*^9}, {3.7522252157785206`*^9, 
   3.75222523174936*^9}, {3.752225717096133*^9, 3.7522257398849916`*^9}, {
   3.752226077309365*^9, 3.752226204840597*^9}, 3.752766343571064*^9, {
   3.7527720251346726`*^9, 3.7527720315085144`*^9}, {3.7527723787747593`*^9, 
   3.7527724141058006`*^9}},
 CellLabel->"In[63]:=",ExpressionUUID->"bb05323c-338f-4225-bbd7-396dd92dfb4c"],

Cell["\<\
The results obtained from the previous step are plotted and animated. The \
green signal is the ECG signal while the red circle indicates the position \
and time instant of event occurrence.\
\>", "Text",
 CellChangeTimes->{{3.752780909121798*^9, 3.7527809506368866`*^9}, {
  3.7527809932074437`*^9, 
  3.752780993223044*^9}},ExpressionUUID->"68b0af24-907d-4151-869e-\
9f2a30699d1f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Animate", "[", 
  RowBox[{
   RowBox[{"If", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"plotposition2", "[", 
        RowBox[{"[", "1", "]"}], "]"}], "[", 
       RowBox[{"[", "i", "]"}], "]"}], "\[NotEqual]", "0"}], ",", 
     RowBox[{"Show", "[", 
      RowBox[{
       RowBox[{"ListPlot", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"signalwindow2", "[", 
           RowBox[{"[", "i", "]"}], "]"}], "[", 
          RowBox[{"[", "All", "]"}], "]"}], ",", 
         RowBox[{"Joined", "\[Rule]", " ", "True"}], ",", 
         RowBox[{"PlotRange", "\[Rule]", " ", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"0", ",", "71"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"-", "150"}], ",", "40"}], "}"}]}], "}"}]}], ",", 
         RowBox[{"PlotStyle", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"Directive", "[", 
            RowBox[{"Green", ",", "Thick"}], "]"}], "}"}]}], ",", 
         RowBox[{"AxesStyle", "\[Rule]", 
          RowBox[{"Directive", "[", 
           RowBox[{"Black", ",", "12", ",", "Thick"}], "]"}]}]}], "]"}], ",", 
       RowBox[{"ListPlot", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{
             RowBox[{"plotposition2", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "[", 
             RowBox[{"[", "i", "]"}], "]"}], ",", 
            RowBox[{
             RowBox[{"signalwindow2", "[", 
              RowBox[{"[", "i", "]"}], "]"}], "[", 
             RowBox[{"[", 
              RowBox[{
               RowBox[{"plotposition2", "[", 
                RowBox[{"[", "1", "]"}], "]"}], "[", 
               RowBox[{"[", "i", "]"}], "]"}], "]"}], "]"}]}], "}"}], "}"}], 
         ",", 
         RowBox[{"PlotMarkers", "\[Rule]", 
          RowBox[{"Graphics", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"Red", ",", 
              RowBox[{"Circle", "[", "]"}]}], "}"}], ",", 
            RowBox[{"ImageSize", "\[Rule]", "10"}]}], "]"}]}]}], "]"}], ",", 
       RowBox[{"Graphics", "[", 
        RowBox[{"Text", "[", 
         RowBox[{
          RowBox[{"\"\<Heartrate = \>\"", "<>", 
           RowBox[{"ToString", "@", 
            RowBox[{"N", "[", 
             RowBox[{
              RowBox[{"RR2", "[", 
               RowBox[{"[", "1", "]"}], "]"}], "[", 
              RowBox[{"[", "i", "]"}], "]"}], "]"}]}], "<>", "\"\<bpm\>\""}], 
          ",", 
          RowBox[{"{", 
           RowBox[{"55", ",", 
            RowBox[{"-", "70"}]}], "}"}], ",", 
          RowBox[{"BaseStyle", "\[Rule]", " ", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"FontWeight", "\[Rule]", "\"\<Bold\>\""}], ",", 
             RowBox[{"FontSize", "\[Rule]", "12"}]}], "}"}]}]}], "]"}], 
        "]"}]}], "]"}], ",", 
     RowBox[{"Show", "[", 
      RowBox[{
       RowBox[{"ListPlot", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"signalwindow2", "[", 
           RowBox[{"[", "i", "]"}], "]"}], "[", 
          RowBox[{"[", "All", "]"}], "]"}], ",", 
         RowBox[{"Joined", "\[Rule]", " ", "True"}], ",", 
         RowBox[{"PlotRange", "\[Rule]", " ", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"0", ",", "71"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"-", "150"}], ",", "40"}], "}"}]}], "}"}]}], ",", 
         RowBox[{"PlotStyle", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"Directive", "[", 
            RowBox[{"Green", ",", "Thick"}], "]"}], "}"}]}], ",", 
         RowBox[{"AxesStyle", "\[Rule]", 
          RowBox[{"Directive", "[", 
           RowBox[{"Black", ",", "12", ",", "Thick"}], "]"}]}]}], "]"}], ",", 
       RowBox[{"Graphics", "[", 
        RowBox[{"Text", "[", 
         RowBox[{
          RowBox[{"\"\<Heartrate = \>\"", "<>", 
           RowBox[{"ToString", "@", 
            RowBox[{"N", "[", 
             RowBox[{
              RowBox[{"RR2", "[", 
               RowBox[{"[", "1", "]"}], "]"}], "[", 
              RowBox[{"[", "i", "]"}], "]"}], "]"}]}], "<>", "\"\<bpm\>\""}], 
          ",", 
          RowBox[{"{", 
           RowBox[{"55", ",", 
            RowBox[{"-", "70"}]}], "}"}], ",", 
          RowBox[{"BaseStyle", "\[Rule]", " ", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"FontWeight", "\[Rule]", "\"\<Bold\>\""}], ",", 
             RowBox[{"FontSize", "\[Rule]", "12"}]}], "}"}]}]}], "]"}], 
        "]"}]}], "]"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", "1", ",", 
     RowBox[{
      RowBox[{"Length", "[", "signalwindow2", "]"}], "-", "71"}], ",", "1", 
     ",", 
     RowBox[{"AnimationRate", "\[Rule]", "35"}], ",", 
     RowBox[{"Appearance", "\[Rule]", "\"\<Open\>\""}]}], "}"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.752229076823036*^9, 3.7522290777876387`*^9}, {
   3.7522291115041947`*^9, 3.7522292449941735`*^9}, {3.7522293206478972`*^9, 
   3.75222932397291*^9}, {3.7522294917594213`*^9, 3.752229591857267*^9}, {
   3.75222965438494*^9, 3.752229656602748*^9}, {3.752229731384883*^9, 
   3.752229736029704*^9}, {3.7522298058566236`*^9, 3.7522298493766184`*^9}, 
   3.7522299459944077`*^9, 3.7522299870129886`*^9, {3.7522300739149833`*^9, 
   3.7522301707842054`*^9}, {3.7522302712742796`*^9, 
   3.7522302999563894`*^9}, {3.7522303333837748`*^9, 
   3.7522304095291567`*^9}, {3.7522304506868896`*^9, 3.75223048090917*^9}, {
   3.752230524560376*^9, 3.752230563288162*^9}, {3.7522306122552447`*^9, 
   3.752230638240748*^9}, {3.7527663125369325`*^9, 3.752766313845537*^9}, {
   3.7527719990776863`*^9, 3.752772019616043*^9}, {3.7527724182574253`*^9, 
   3.75277243930175*^9}, 3.752772604794305*^9, 3.7527739890346727`*^9},
 CellLabel->"In[64]:=",ExpressionUUID->"77c19c47-e1b4-4456-af9d-6b74f43b708a"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`i$$ = 407, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[$CellContext`i$$], 1, 34567, 1}}, Typeset`size$$ = {
    259.2, {75., 77.6382658518142}}, Typeset`update$$ = 0, Typeset`initDone$$,
     Typeset`skipInitDone$$ = True}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`i$$ = 1}, 
      "ControllerVariables" :> {}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> If[Part[
          Part[$CellContext`plotposition2, 1], $CellContext`i$$] != 0, 
        Show[
         ListPlot[
          Part[
           Part[$CellContext`signalwindow2, $CellContext`i$$], All], Joined -> 
          True, PlotRange -> {{0, 71}, {-150, 40}}, PlotStyle -> {
            Directive[Green, Thick]}, AxesStyle -> 
          Directive[Black, 12, Thick]], 
         ListPlot[{{
            Part[
             Part[$CellContext`plotposition2, 1], $CellContext`i$$], 
            Part[
             Part[$CellContext`signalwindow2, $CellContext`i$$], 
             Part[
              Part[$CellContext`plotposition2, 1], $CellContext`i$$]]}}, 
          PlotMarkers -> Graphics[{Red, 
             Circle[]}, ImageSize -> 10]], 
         Graphics[
          Text[
           StringJoin["Heartrate = ", 
            ToString[
             N[
              Part[
               Part[$CellContext`RR2, 1], $CellContext`i$$]]], "bpm"], {
           55, -70}, BaseStyle -> {FontWeight -> "Bold", FontSize -> 12}]]], 
        Show[
         ListPlot[
          Part[
           Part[$CellContext`signalwindow2, $CellContext`i$$], All], Joined -> 
          True, PlotRange -> {{0, 71}, {-150, 40}}, PlotStyle -> {
            Directive[Green, Thick]}, AxesStyle -> 
          Directive[Black, 12, Thick]], 
         Graphics[
          Text[
           StringJoin["Heartrate = ", 
            ToString[
             N[
              Part[
               Part[$CellContext`RR2, 1], $CellContext`i$$]]], "bpm"], {
           55, -70}, BaseStyle -> {FontWeight -> "Bold", FontSize -> 12}]]]], 
      "Specifications" :> {{$CellContext`i$$, 1, 34567, 1, AnimationRate -> 
         35, Appearance -> "Open", 
         AppearanceElements -> {
          "ProgressSlider", "PlayPauseButton", "FasterSlowerButtons", 
           "DirectionButton"}}}, 
      "Options" :> {
       ControlType -> Animator, AppearanceElements -> None, DefaultBaseStyle -> 
        "Animate", DefaultLabelStyle -> "AnimateLabel", SynchronousUpdating -> 
        True, ShrinkingDelay -> 10.}, "DefaultOptions" :> {}],
     ImageSizeCache->{295., {102., 105.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Animate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{
  3.752229078667042*^9, 3.7522291341186914`*^9, 3.7522292485301857`*^9, 
   3.752229325098914*^9, {3.7522295146349277`*^9, 3.752229529491391*^9}, 
   3.752229594061276*^9, 3.752229659667362*^9, 3.7522297401705217`*^9, 
   3.752229832028741*^9, 3.7522300484820585`*^9, {3.7522300974020815`*^9, 
   3.7522301376528635`*^9}, 3.752230172204812*^9, 3.752230282122713*^9, 
   3.7522303413870115`*^9, 3.7522303867666206`*^9, 3.7522304871916018`*^9, {
   3.752230541685258*^9, 3.752230564700971*^9}, {3.75223061603446*^9, 
   3.752230640515757*^9}, 3.752248976652082*^9, {3.752766304167097*^9, 
   3.752766315075142*^9}, 3.7527666264140725`*^9, 3.7527740170597525`*^9, 
   3.752909635900905*^9, 3.8168635211515245`*^9},
 CellLabel->"Out[64]=",ExpressionUUID->"5c33cdf4-ab81-47d1-889f-3decdf2842c5"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Reducing number of predictors", "Subsection",
 CellChangeTimes->{{3.752781024360876*^9, 
  3.7527810321367197`*^9}},ExpressionUUID->"dc4d61a2-50f5-4855-8083-\
70460160715e"],

Cell["\<\
Sometimes having a large number of predictors often can lead to bad \
classification models. Therefore, the scope reduction of predictor numbers by \
downsampling data frames is discussed in this section.\
\>", "Text",
 CellChangeTimes->{{3.752781043164379*^9, 3.7527810668119698`*^9}, {
  3.752781154897058*^9, 
  3.7527812073812885`*^9}},ExpressionUUID->"87179d77-adcb-47fb-a57b-\
c159f9eaf4f2"],

Cell[BoxData[
 RowBox[{
  RowBox[{"trainingdata3", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"Downsample", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"trainingdata2", "[", 
         RowBox[{"[", "i", "]"}], "]"}], "[", 
        RowBox[{"[", "All", "]"}], "]"}], ",", "2"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", 
       RowBox[{"Length", "[", "trainingdata2", "]"}]}], "}"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.752781249714738*^9, 3.7527812885357747`*^9}, {
  3.7527815822416987`*^9, 3.752781582508899*^9}},
 CellLabel->"In[65]:=",ExpressionUUID->"8512565c-a50f-431e-94ca-96703c043b12"],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{"downsampling", " ", "trainingdata"}], "*)"}]], "Input",ExpressionUU\
ID->"98620198-bb2a-45c3-abe7-f6add7f7bac4"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"classifier3", "=", 
    RowBox[{"Classify", "[", 
     RowBox[{
      RowBox[{"trainingdata3", "\[Rule]", " ", "traininglabel2"}], ",", 
      RowBox[{"Method", "\[Rule]", " ", 
       RowBox[{"{", 
        RowBox[{"\"\<SupportVectorMachine\>\"", ",", 
         RowBox[{"\"\<KernelType\>\"", "\[Rule]", " ", "\"\<Polynomial\>\""}],
          ",", 
         RowBox[{"\"\<PolynomialDegree\>\"", "\[Rule]", " ", "2"}]}], 
        "}"}]}]}], "]"}]}], ";"}], 
  RowBox[{"(*", "classifier", "*)"}]}]], "Input",
 CellChangeTimes->{{3.752192551998498*^9, 3.7521925597807217`*^9}, {
  3.7527653298085213`*^9, 3.752765349292042*^9}, {3.7527654801413794`*^9, 
  3.752765480499981*^9}, {3.752766001646552*^9, 3.7527660130220413`*^9}, {
  3.7527660705577364`*^9, 3.7527660712181406`*^9}, {3.752766129623829*^9, 
  3.7527661301300297`*^9}, {3.752781636284893*^9, 3.7527816400759115`*^9}},
 CellLabel->"In[66]:=",ExpressionUUID->"834ed023-807c-493a-bd3c-863319445d1c"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"testdata3", "=", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"Downsample", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"testdata2", "[", 
          RowBox[{"[", "i", "]"}], "]"}], "[", 
         RowBox[{"[", "All", "]"}], "]"}], ",", "2"}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"i", ",", "1", ",", 
        RowBox[{"Length", "[", "testdata2", "]"}]}], "}"}]}], "]"}]}], ";"}], 
  RowBox[{"(*", 
   RowBox[{"downsampling", " ", "testdata"}], "*)"}]}]], "Input",
 CellChangeTimes->{{3.7521926208793783`*^9, 3.7521926906417017`*^9}, {
  3.7527653902870693`*^9, 3.7527653933826942`*^9}, {3.7527816579918165`*^9, 
  3.752781684633461*^9}},
 CellLabel->"In[67]:=",ExpressionUUID->"483830fd-e704-4f5f-ad9a-3531677b9bc0"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"results3", "=", 
    RowBox[{"classifier3", "[", "testdata3", "]"}]}], ";"}], " ", 
  RowBox[{"(*", 
   RowBox[{"obtaining", " ", "testdata", " ", "results"}], "*)"}]}]], "Input",
 CellChangeTimes->{{3.7521928420991096`*^9, 3.752192854504757*^9}, {
  3.7527654700639334`*^9, 3.7527654831559906`*^9}, {3.7527816963277445`*^9, 
  3.7527817036167936`*^9}},
 CellLabel->"In[68]:=",ExpressionUUID->"2ed2297e-19cb-43a8-9de7-e2a176c69ab9"],

Cell[BoxData[
 RowBox[{
  RowBox[{"joinmat", "=", 
   RowBox[{"beatbybeat", "[", 
    RowBox[{"testlabel2", ",", "results3", ",", "125"}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.7527620711045275`*^9, 3.7527621042024193`*^9}, {
  3.752762178988308*^9, 3.7527621800157127`*^9}, {3.752764828581708*^9, 
  3.752764831882926*^9}, {3.7527655312468405`*^9, 3.752765531602042*^9}},
 CellLabel->"In[69]:=",ExpressionUUID->"fe8f2f44-dc1a-4065-afca-50716cce816e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Ck3", "=", 
  RowBox[{"confusionmatrix", "[", 
   RowBox[{"joinmat", ",", 
    RowBox[{"Max", "[", 
     RowBox[{
      RowBox[{"Length", "[", "testlabel2", "]"}], ",", 
      RowBox[{"Length", "[", "results3", "]"}]}], "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.752764892047409*^9, 3.7527649016406546`*^9}, {
  3.7527655443995266`*^9, 3.752765552249983*^9}},
 CellLabel->"In[70]:=",ExpressionUUID->"ae21b30d-0fd8-4fc2-be36-76075a7eb989"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"10720", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"16", ",", "137"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.7527649021904573`*^9, 3.752765553607211*^9, 
  3.752765941074977*^9, 3.752766050315612*^9, 3.752766107644304*^9, 
  3.7527661656026134`*^9, 3.7527740989170732`*^9, 3.7529097425826926`*^9, 
  3.816864862983756*^9},
 CellLabel->"Out[70]=",ExpressionUUID->"fd3bc00f-1388-4cb2-b7c0-d910ef2dcbff"]
}, Open  ]],

Cell["\<\
From the confusion matrix, we observer that the classifier exhibited a \
Sensitivity of 91.5% (higher than previously) and specificity of 99.9% \
(lower). The tradeoff between sensitivity ans specificity needs to be \
discussed. For this application, I prefer a specificity of 100%, therefore I \
would choose classifier 2 with data frame length of 71 without downsampling. \
The classifier performance is checked and animated to simulate real-time peak \
detection conditions next using the ECG signal imported in the previous part.\
\>", "Text",
 CellChangeTimes->{{3.752781741142029*^9, 3.752781891471279*^9}, {
  3.752782587688729*^9, 
  3.7527826100873165`*^9}},ExpressionUUID->"24387ade-b33f-411a-a70e-\
d2631ef358ce"],

Cell[BoxData[
 RowBox[{
  RowBox[{"signalwindow3", "=", 
   RowBox[{"ConstantArray", "[", 
    RowBox[{"0", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Length", "[", 
        RowBox[{"Transpose", "[", "signalpadded2", "]"}], "]"}], ",", "36"}], 
      "}"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.752222834789852*^9, 3.752222873395445*^9}, {
  3.7522230818716936`*^9, 3.752223087447007*^9}, {3.752766720248928*^9, 
  3.7527667217219343`*^9}, {3.752772466619507*^9, 3.752772469675125*^9}},
 CellLabel->"In[71]:=",ExpressionUUID->"1c78ed37-d6d0-4cdd-a3c7-14ef697f949a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"j3", "=", 
   RowBox[{"ConstantArray", "[", 
    RowBox[{"0", ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", 
       RowBox[{"Length", "[", 
        RowBox[{"Transpose", "[", "signalpadded2", "]"}], "]"}]}], "}"}]}], 
    "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.75222293101883*^9, 3.7522229411239853`*^9}, 
   3.7522231254015074`*^9, 3.752772478359383*^9, 3.7527742008826637`*^9},
 CellLabel->"In[72]:=",ExpressionUUID->"1423cf2c-e4fd-42b8-aea1-5f873f652604"],

Cell[BoxData[
 RowBox[{
  RowBox[{"plotposition3", "=", 
   RowBox[{"ConstantArray", "[", 
    RowBox[{"0", ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", 
       RowBox[{"Length", "[", 
        RowBox[{"Transpose", "[", "signalpadded2", "]"}], "]"}]}], "}"}]}], 
    "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.752226032187445*^9, 3.7522260453471804`*^9}, 
   3.752772480971002*^9, 3.7527742065908775`*^9},
 CellLabel->"In[73]:=",ExpressionUUID->"30015487-4cc7-40be-b987-868217f0c7c4"],

Cell[BoxData[
 RowBox[{
  RowBox[{"RR3", "=", 
   RowBox[{"ConstantArray", "[", 
    RowBox[{"0", ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", 
       RowBox[{"Length", "[", 
        RowBox[{"Transpose", "[", "signalpadded2", "]"}], "]"}]}], "}"}]}], 
    "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7522228839056063`*^9, 3.7522229175011225`*^9}, 
   3.7522231218168983`*^9, {3.7522478600985165`*^9, 3.75224786452073*^9}, {
   3.7527720343829412`*^9, 3.7527720505656404`*^9}, 3.752774209910987*^9, 
   3.7527743832202682`*^9},
 CellLabel->"In[74]:=",ExpressionUUID->"deea0d21-f3ec-43e2-ac40-5ec11598e2dd"],

Cell["Warning-The code that follows  has a lengthy evaluation time", "Text",
 CellChangeTimes->{{3.7527818973539295`*^9, 
  3.7527819396552734`*^9}},ExpressionUUID->"4dd2c08e-11cb-4292-b35a-\
198a6e1dfd56"],

Cell[BoxData[
 RowBox[{
  RowBox[{"For", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"i", "=", "1"}], ";", 
     RowBox[{"setval", "=", "0"}]}], ",", 
    RowBox[{"i", "\[LessEqual]", 
     RowBox[{
      RowBox[{"Length", "[", 
       RowBox[{"Transpose", "[", "signalpadded2", "]"}], "]"}], "-", "70"}]}],
     ",", 
    RowBox[{"i", "++"}], ",", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"signalwindow3", "[", 
        RowBox[{"[", "i", "]"}], "]"}], "[", 
       RowBox[{"[", "All", "]"}], "]"}], "=", 
      RowBox[{"Downsample", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"signalpadded2", "[", 
          RowBox[{"[", "1", "]"}], "]"}], "[", 
         RowBox[{"[", 
          RowBox[{"i", ";;", 
           RowBox[{"i", "+", "70"}]}], "]"}], "]"}], ",", "2"}], "]"}]}], ";", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"classifier3", "[", 
         RowBox[{
          RowBox[{"signalwindow3", "[", 
           RowBox[{"[", "i", "]"}], "]"}], "[", 
          RowBox[{"[", "All", "]"}], "]"}], "]"}], "\[Equal]", "1."}], ",", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"RR3", "[", 
           RowBox[{"[", "1", "]"}], "]"}], "[", 
          RowBox[{"[", "i", "]"}], "]"}], "=", 
         RowBox[{"60", "/", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"i", "-", "setval"}], ")"}], "/", "125"}], ")"}]}]}], 
        ";", 
        RowBox[{"setval", "=", "i"}], ";", 
        RowBox[{
         RowBox[{
          RowBox[{"plotposition3", "[", 
           RowBox[{"[", "1", "]"}], "]"}], "[", 
          RowBox[{"[", "i", "]"}], "]"}], "=", "19"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"plotposition3", "[", 
           RowBox[{"[", "1", "]"}], "]"}], "[", 
          RowBox[{"[", 
           RowBox[{"i", "+", "1"}], "]"}], "]"}], "=", "0"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"j3", "[", 
           RowBox[{"[", "1", "]"}], "]"}], "[", 
          RowBox[{"[", "i", "]"}], "]"}], "=", "1"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"j3", "[", 
           RowBox[{"[", "1", "]"}], "]"}], "[", 
          RowBox[{"[", "i", "]"}], "]"}], "=", "0"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"plotposition3", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "[", 
             RowBox[{"[", 
              RowBox[{"i", "-", "1"}], "]"}], "]"}], "==", "0"}], " ", "&&", 
           " ", 
           RowBox[{
            RowBox[{
             RowBox[{"plotposition3", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "[", 
             RowBox[{"[", 
              RowBox[{"i", "-", "2"}], "]"}], "]"}], "\[NotEqual]", "0"}]}], 
          ",", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"plotposition3", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "[", 
             RowBox[{"[", "i", "]"}], "]"}], "=", 
            RowBox[{
             RowBox[{
              RowBox[{"plotposition3", "[", 
               RowBox[{"[", "1", "]"}], "]"}], "[", 
              RowBox[{"[", 
               RowBox[{"i", "-", "2"}], "]"}], "]"}], "-", "1"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{
             RowBox[{"plotposition3", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "[", 
             RowBox[{"[", 
              RowBox[{"i", "+", "1"}], "]"}], "]"}], "=", "0"}]}], ","}], 
         "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"i", "\[NotEqual]", "1"}], ",", 
          RowBox[{
           RowBox[{
            RowBox[{"RR3", "[", 
             RowBox[{"[", "1", "]"}], "]"}], "[", 
            RowBox[{"[", "i", "]"}], "]"}], "=", 
           RowBox[{
            RowBox[{"RR3", "[", 
             RowBox[{"[", "1", "]"}], "]"}], "[", 
            RowBox[{"[", 
             RowBox[{"i", "-", "1"}], "]"}], "]"}]}], ","}], "]"}]}]}], 
      "]"}]}]}], "]"}], ";"}]], "Input",
 CellChangeTimes->{
  3.752217867607428*^9, {3.752218180088408*^9, 3.7522183195881577`*^9}, {
   3.7522183600544643`*^9, 3.752218378236909*^9}, {3.752218475906754*^9, 
   3.7522185468081303`*^9}, {3.752218590470722*^9, 3.7522186302711215`*^9}, {
   3.7522189377220316`*^9, 3.752218946182162*^9}, {3.7522190949319468`*^9, 
   3.7522191020245557`*^9}, {3.7522197573377914`*^9, 3.752219839714037*^9}, {
   3.7522210316078463`*^9, 3.752221038700455*^9}, {3.7522211855302105`*^9, 
   3.7522212261832905`*^9}, {3.75222151831781*^9, 3.752221520110326*^9}, {
   3.752221574136155*^9, 3.7522216443947344`*^9}, {3.7522225593556304`*^9, 
   3.752222599893753*^9}, {3.7522226382743425`*^9, 3.7522226747423935`*^9}, {
   3.752222782536549*^9, 3.7522227979342856`*^9}, {3.752222951404143*^9, 
   3.752222963169324*^9}, {3.752222994702142*^9, 3.752222999416456*^9}, {
   3.7522233774193773`*^9, 3.752223390417411*^9}, {3.7522237638956156`*^9, 
   3.7522237648154173`*^9}, {3.7522241780510983`*^9, 
   3.7522241934525394`*^9}, {3.752224252391296*^9, 3.7522242655977297`*^9}, {
   3.752224401491984*^9, 3.752224403393489*^9}, {3.7522252157785206`*^9, 
   3.75222523174936*^9}, {3.752225717096133*^9, 3.7522257398849916`*^9}, {
   3.752226077309365*^9, 3.752226204840597*^9}, 3.752766343571064*^9, {
   3.7527667295935774`*^9, 3.752766748557042*^9}, {3.7527673086145687`*^9, 
   3.752767348954744*^9}, {3.7527675050415583`*^9, 3.75276752927966*^9}, {
   3.752768042778846*^9, 3.752768082943248*^9}, {3.752769350361438*^9, 
   3.752769378978422*^9}, {3.752770110184929*^9, 3.7527702020542064`*^9}, {
   3.7527704211940975`*^9, 3.752770498342103*^9}, {3.752770839708849*^9, 
   3.752770841236458*^9}, {3.752771210675869*^9, 3.7527712601977015`*^9}, {
   3.752771457187763*^9, 3.7527714575153637`*^9}, {3.7527716685351524`*^9, 
   3.752771690039051*^9}, {3.752771989433632*^9, 3.752772009489983*^9}, {
   3.75277248979066*^9, 3.7527725482247987`*^9}},
 CellLabel->"In[75]:=",ExpressionUUID->"ef2effd1-db65-4b7c-9bef-07dfc7c2c398"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Animate", "[", 
  RowBox[{
   RowBox[{"If", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"plotposition3", "[", 
        RowBox[{"[", "1", "]"}], "]"}], "[", 
       RowBox[{"[", "i", "]"}], "]"}], "\[NotEqual]", "0"}], ",", 
     RowBox[{"Show", "[", 
      RowBox[{
       RowBox[{"ListPlot", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"signalwindow3", "[", 
           RowBox[{"[", "i", "]"}], "]"}], "[", 
          RowBox[{"[", "All", "]"}], "]"}], ",", 
         RowBox[{"Joined", "\[Rule]", " ", "True"}], ",", 
         RowBox[{"PlotRange", "\[Rule]", " ", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"0", ",", "36"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"-", "150"}], ",", "40"}], "}"}]}], "}"}]}], ",", 
         RowBox[{"PlotStyle", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"Directive", "[", 
            RowBox[{"Green", ",", "Thick"}], "]"}], "}"}]}], ",", 
         RowBox[{"AxesStyle", "\[Rule]", 
          RowBox[{"Directive", "[", 
           RowBox[{"Black", ",", "12", ",", "Thick"}], "]"}]}]}], "]"}], ",", 
       RowBox[{"ListPlot", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{
             RowBox[{"plotposition3", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "[", 
             RowBox[{"[", "i", "]"}], "]"}], ",", 
            RowBox[{
             RowBox[{"signalwindow3", "[", 
              RowBox[{"[", "i", "]"}], "]"}], "[", 
             RowBox[{"[", 
              RowBox[{
               RowBox[{"plotposition3", "[", 
                RowBox[{"[", "1", "]"}], "]"}], "[", 
               RowBox[{"[", "i", "]"}], "]"}], "]"}], "]"}]}], "}"}], "}"}], 
         ",", 
         RowBox[{"PlotMarkers", "\[Rule]", 
          RowBox[{"Graphics", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"Red", ",", 
              RowBox[{"Circle", "[", "]"}]}], "}"}], ",", 
            RowBox[{"ImageSize", "\[Rule]", "10"}]}], "]"}]}]}], "]"}], ",", 
       RowBox[{"Graphics", "[", 
        RowBox[{"Text", "[", 
         RowBox[{
          RowBox[{"\"\<Heartrate = \>\"", "<>", 
           RowBox[{"ToString", "@", 
            RowBox[{"N", "[", 
             RowBox[{
              RowBox[{"RR3", "[", 
               RowBox[{"[", "1", "]"}], "]"}], "[", 
              RowBox[{"[", "i", "]"}], "]"}], "]"}]}], "<>", "\"\<bpm\>\""}], 
          ",", 
          RowBox[{"{", 
           RowBox[{"25", ",", 
            RowBox[{"-", "70"}]}], "}"}], ",", 
          RowBox[{"BaseStyle", "\[Rule]", " ", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"FontWeight", "\[Rule]", "\"\<Bold\>\""}], ",", 
             RowBox[{"FontSize", "\[Rule]", "12"}]}], "}"}]}]}], "]"}], 
        "]"}]}], "]"}], ",", 
     RowBox[{"Show", "[", 
      RowBox[{
       RowBox[{"ListPlot", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"signalwindow3", "[", 
           RowBox[{"[", "i", "]"}], "]"}], "[", 
          RowBox[{"[", "All", "]"}], "]"}], ",", 
         RowBox[{"Joined", "\[Rule]", " ", "True"}], ",", 
         RowBox[{"PlotRange", "\[Rule]", " ", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"0", ",", "36"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"-", "150"}], ",", "40"}], "}"}]}], "}"}]}], ",", 
         RowBox[{"PlotStyle", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"Directive", "[", 
            RowBox[{"Green", ",", "Thick"}], "]"}], "}"}]}], ",", 
         RowBox[{"AxesStyle", "\[Rule]", 
          RowBox[{"Directive", "[", 
           RowBox[{"Black", ",", "12", ",", "Thick"}], "]"}]}]}], "]"}], ",", 
       RowBox[{"Graphics", "[", 
        RowBox[{"Text", "[", 
         RowBox[{
          RowBox[{"\"\<Heartrate = \>\"", "<>", 
           RowBox[{"ToString", "@", 
            RowBox[{"N", "[", 
             RowBox[{
              RowBox[{"RR3", "[", 
               RowBox[{"[", "1", "]"}], "]"}], "[", 
              RowBox[{"[", "i", "]"}], "]"}], "]"}]}], "<>", "\"\<bpm\>\""}], 
          ",", 
          RowBox[{"{", 
           RowBox[{"25", ",", 
            RowBox[{"-", "70"}]}], "}"}], ",", 
          RowBox[{"BaseStyle", "\[Rule]", " ", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"FontWeight", "\[Rule]", "\"\<Bold\>\""}], ",", 
             RowBox[{"FontSize", "\[Rule]", "12"}]}], "}"}]}]}], "]"}], 
        "]"}]}], "]"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", "1", ",", 
     RowBox[{
      RowBox[{"Length", "[", "signalwindow3", "]"}], "-", "35"}], ",", "1", 
     ",", 
     RowBox[{"AnimationRate", "\[Rule]", "35"}], ",", 
     RowBox[{"Appearance", "\[Rule]", "\"\<Open\>\""}]}], "}"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.752229076823036*^9, 3.7522290777876387`*^9}, {
   3.7522291115041947`*^9, 3.7522292449941735`*^9}, {3.7522293206478972`*^9, 
   3.75222932397291*^9}, {3.7522294917594213`*^9, 3.752229591857267*^9}, {
   3.75222965438494*^9, 3.752229656602748*^9}, {3.752229731384883*^9, 
   3.752229736029704*^9}, {3.7522298058566236`*^9, 3.7522298493766184`*^9}, 
   3.7522299459944077`*^9, 3.7522299870129886`*^9, {3.7522300739149833`*^9, 
   3.7522301707842054`*^9}, {3.7522302712742796`*^9, 
   3.7522302999563894`*^9}, {3.7522303333837748`*^9, 
   3.7522304095291567`*^9}, {3.7522304506868896`*^9, 3.75223048090917*^9}, {
   3.752230524560376*^9, 3.752230563288162*^9}, {3.7522306122552447`*^9, 
   3.752230638240748*^9}, {3.7527663125369325`*^9, 3.752766313845537*^9}, {
   3.752766989998048*^9, 3.752767029238634*^9}, {3.752768232343315*^9, 
   3.7527682377071466`*^9}, {3.7527700618044133`*^9, 3.752770062181314*^9}, {
   3.752771969385131*^9, 3.7527719814791827`*^9}, {3.752772565743082*^9, 
   3.7527725954304433`*^9}, {3.7527745871651697`*^9, 3.7527745899603767`*^9}},
 CellLabel->"In[76]:=",ExpressionUUID->"1c40a511-8f30-41a7-a2de-325795d241ab"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`i$$ = 236, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[$CellContext`i$$], 1, 34603, 1}}, Typeset`size$$ = {
    259.2, {76., 77.10755471725278}}, Typeset`update$$ = 0, 
    Typeset`initDone$$, Typeset`skipInitDone$$ = True}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`i$$ = 1}, 
      "ControllerVariables" :> {}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> If[Part[
          Part[$CellContext`plotposition3, 1], $CellContext`i$$] != 0, 
        Show[
         ListPlot[
          Part[
           Part[$CellContext`signalwindow3, $CellContext`i$$], All], Joined -> 
          True, PlotRange -> {{0, 36}, {-150, 40}}, PlotStyle -> {
            Directive[Green, Thick]}, AxesStyle -> 
          Directive[Black, 12, Thick]], 
         ListPlot[{{
            Part[
             Part[$CellContext`plotposition3, 1], $CellContext`i$$], 
            Part[
             Part[$CellContext`signalwindow3, $CellContext`i$$], 
             Part[
              Part[$CellContext`plotposition3, 1], $CellContext`i$$]]}}, 
          PlotMarkers -> Graphics[{Red, 
             Circle[]}, ImageSize -> 10]], 
         Graphics[
          Text[
           StringJoin["Heartrate = ", 
            ToString[
             N[
              Part[
               Part[$CellContext`RR3, 1], $CellContext`i$$]]], "bpm"], {
           25, -70}, BaseStyle -> {FontWeight -> "Bold", FontSize -> 12}]]], 
        Show[
         ListPlot[
          Part[
           Part[$CellContext`signalwindow3, $CellContext`i$$], All], Joined -> 
          True, PlotRange -> {{0, 36}, {-150, 40}}, PlotStyle -> {
            Directive[Green, Thick]}, AxesStyle -> 
          Directive[Black, 12, Thick]], 
         Graphics[
          Text[
           StringJoin["Heartrate = ", 
            ToString[
             N[
              Part[
               Part[$CellContext`RR3, 1], $CellContext`i$$]]], "bpm"], {
           25, -70}, BaseStyle -> {FontWeight -> "Bold", FontSize -> 12}]]]], 
      "Specifications" :> {{$CellContext`i$$, 1, 34603, 1, AnimationRate -> 
         35, Appearance -> "Open", 
         AppearanceElements -> {
          "ProgressSlider", "PlayPauseButton", "FasterSlowerButtons", 
           "DirectionButton"}}}, 
      "Options" :> {
       ControlType -> Animator, AppearanceElements -> None, DefaultBaseStyle -> 
        "Animate", DefaultLabelStyle -> "AnimateLabel", SynchronousUpdating -> 
        True, ShrinkingDelay -> 10.}, "DefaultOptions" :> {}],
     ImageSizeCache->{295., {102., 105.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Animate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{
  3.752229078667042*^9, 3.7522291341186914`*^9, 3.7522292485301857`*^9, 
   3.752229325098914*^9, {3.7522295146349277`*^9, 3.752229529491391*^9}, 
   3.752229594061276*^9, 3.752229659667362*^9, 3.7522297401705217`*^9, 
   3.752229832028741*^9, 3.7522300484820585`*^9, {3.7522300974020815`*^9, 
   3.7522301376528635`*^9}, 3.752230172204812*^9, 3.752230282122713*^9, 
   3.7522303413870115`*^9, 3.7522303867666206`*^9, 3.7522304871916018`*^9, {
   3.752230541685258*^9, 3.752230564700971*^9}, {3.75223061603446*^9, 
   3.752230640515757*^9}, 3.752248976652082*^9, {3.752766304167097*^9, 
   3.752766315075142*^9}, 3.7527666264140725`*^9, {3.7527669739455757`*^9, 
   3.7527670303808374`*^9}, 3.7527677607854047`*^9, 3.752768179883056*^9, 
   3.7527682383819485`*^9, 3.752769199841859*^9, {3.7527700388871555`*^9, 
   3.7527700642195196`*^9}, 3.752771174586805*^9, 3.7527718753154345`*^9, {
   3.7527745760210385`*^9, 3.7527745907734785`*^9}, 3.752910018375577*^9, 
   3.8168650630111217`*^9},
 CellLabel->"Out[76]=",ExpressionUUID->"1f623c14-bccb-4743-8651-a5a95433c13d"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Data fusion based on signal quality", "Section",
 CellChangeTimes->{{3.752782197279165*^9, 
  3.7527822080564384`*^9}},ExpressionUUID->"86e6d541-7efa-4fc3-acef-\
988d8c284672"],

Cell["\<\
Sometimes the heart rate obtained can be unreliable due to noisy signals or \
flat lines. Therefore for improving reliability of heartrate obtained, signal \
quality indicators of both PPG and ECG signals are used to selecting the most \
reliable heartrate. If the signal quality indicator of PPG signal is higher \
than that of ECG signal, the heartrate obtained from PPG signal is displayed \
and vice versa. The calculation of Signal Quality Indicators is outside the \
scope of this project and therefore already available signal quality \
indicator is imported and used.\
\>", "Text",
 CellChangeTimes->{{3.752782212182062*^9, 
  3.7527822228637576`*^9}},ExpressionUUID->"a43597d8-ae47-4164-8172-\
b71ad510a89f"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"ecgsqis", "=", 
    RowBox[{
    "Import", "[", 
     "\"\<C:\\\\Users\\\\Arlene John\\\\Desktop\\\\data\\\\ecgsqi.mat\>\"", 
     "]"}]}], ";"}], " ", 
  RowBox[{"(*", 
   RowBox[{
   "Importing", " ", "ECG", " ", "SQI", " ", "and", " ", "converting", " ", 
    "to", " ", "vector", " ", "with", " ", "array", " ", "padding", " ", 
    "for", " ", "initial", " ", "few", " ", "zeros", " ", "in", " ", 
    "signal"}], "*)"}]}]], "Input",
 CellChangeTimes->{{3.752245987892849*^9, 3.7522459955064645`*^9}, {
   3.752246038483152*^9, 3.7522460396727543`*^9}, 3.752249555402765*^9, {
   3.7527822256409807`*^9, 3.7527822952911644`*^9}, {3.752782938155085*^9, 
   3.7527829392780933`*^9}, {3.8168633883212557`*^9, 3.816863390132414*^9}},
 CellLabel->"In[77]:=",ExpressionUUID->"3c5340e2-7680-4452-851a-7583b723c231"],

Cell[BoxData[
 RowBox[{
  RowBox[{"ecgsqis", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"ecgsqis", "[", 
      RowBox[{"[", "1", "]"}], "]"}], "[", 
     RowBox[{"[", "All", "]"}], "]"}], "[", 
    RowBox[{"[", "All", "]"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.752247175458438*^9, 3.7522471887766848`*^9}, {
  3.7522495583355703`*^9, 3.7522495811800103`*^9}},
 CellLabel->"In[78]:=",ExpressionUUID->"f32490a7-913e-41b5-9192-20acfb7f0381"],

Cell[BoxData[
 RowBox[{
  RowBox[{"ecgsqis", "=", 
   RowBox[{"ArrayPad", "[", 
    RowBox[{"ecgsqis", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"70", ",", "0"}], "}"}]}], "}"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7522512358529806`*^9, 3.7522512424375935`*^9}},
 CellLabel->"In[79]:=",ExpressionUUID->"bebe100d-7979-4bdf-b895-a7c454b18359"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"ppgsqis", "=", 
    RowBox[{
    "Import", "[", 
     "\"\<C:\\\\Users\\\\Arlene John\\\\Desktop\\\\data\\\\ppgsqi.mat\>\"", 
     "]"}]}], ";"}], 
  RowBox[{"(*", 
   RowBox[{
   "Importing", " ", "ECG", " ", "SQI", " ", "and", " ", "converting", " ", 
    "to", " ", "vector", " ", "with", " ", "array", " ", "padding"}], 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.752246006599286*^9, 3.75224600821309*^9}, {
   3.7522460691470213`*^9, 3.7522460803112526`*^9}, 3.7522495615189753`*^9, 
   3.752782279935241*^9, {3.752782941527303*^9, 3.7527829426327066`*^9}, {
   3.8168633933936915`*^9, 3.816863395155979*^9}},
 CellLabel->"In[80]:=",ExpressionUUID->"c8551504-1575-4134-9efc-3e8d37a3e0f7"],

Cell[BoxData[
 RowBox[{
  RowBox[{"ppgsqis", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"ppgsqis", "[", 
      RowBox[{"[", "1", "]"}], "]"}], "[", 
     RowBox[{"[", "All", "]"}], "]"}], "[", 
    RowBox[{"[", "All", "]"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.752247175458438*^9, 3.7522471887766848`*^9}, {
  3.7522472351198015`*^9, 3.752247240427617*^9}, {3.7522495639847803`*^9, 
  3.7522495705387917`*^9}},
 CellLabel->"In[81]:=",ExpressionUUID->"51dfa137-0c8b-4f59-9011-7cd9073099eb"],

Cell[BoxData[
 RowBox[{
  RowBox[{"ppgsqis", "=", 
   RowBox[{"ArrayPad", "[", 
    RowBox[{"ppgsqis", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"70", ",", "0"}], "}"}]}], "}"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7522512604752254`*^9, 3.752251265061034*^9}},
 CellLabel->"In[82]:=",ExpressionUUID->"d4de8968-45ae-41ee-9057-8a32ceaff000"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"RRfinal", "=", 
    RowBox[{"ConstantArray", "[", 
     RowBox[{"0", ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", 
        RowBox[{"Length", "[", 
         RowBox[{"Transpose", "[", "RR1", "]"}], "]"}]}], "}"}]}], "]"}]}], 
   ";"}], " "}]], "Input",
 CellChangeTimes->{{3.7522494380259657`*^9, 3.7522494543183947`*^9}, {
  3.7527746401461377`*^9, 3.752774642618044*^9}, {3.7527823105212708`*^9, 
  3.7527823161367025`*^9}},
 CellLabel->"In[83]:=",ExpressionUUID->"bc769609-fed0-4979-8308-e81e642c33f2"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"For", "[", 
    RowBox[{
     RowBox[{"i", "=", "1"}], ",", 
     RowBox[{"i", "\[LessEqual]", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"Length", "[", 
         RowBox[{"Transpose", "[", "RR1", "]"}], "]"}], "-", "71"}], ")"}]}], 
     ",", 
     RowBox[{"i", "=", 
      RowBox[{"i", "+", "71"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Total", "[", 
          RowBox[{
           RowBox[{"ecgsqis", "[", 
            RowBox[{"[", "1", "]"}], "]"}], "[", 
           RowBox[{"[", 
            RowBox[{"i", ";;", 
             RowBox[{"i", "+", "70"}]}], "]"}], "]"}], "]"}], ">=", 
         RowBox[{"Total", "[", 
          RowBox[{
           RowBox[{"ppgsqis", "[", 
            RowBox[{"[", "1", "]"}], "]"}], "[", 
           RowBox[{"[", 
            RowBox[{"i", ";;", 
             RowBox[{"i", "+", "70"}]}], "]"}], "]"}], "]"}]}], ",", 
        RowBox[{
         RowBox[{
          RowBox[{"RRfinal", "[", 
           RowBox[{"[", "1", "]"}], "]"}], "[", 
          RowBox[{"[", 
           RowBox[{"i", ";;", 
            RowBox[{"i", "+", "70"}]}], "]"}], "]"}], "=", 
         RowBox[{"N", "[", 
          RowBox[{
           RowBox[{"RR2", "[", 
            RowBox[{"[", "1", "]"}], "]"}], "[", 
           RowBox[{"[", 
            RowBox[{"i", ";;", 
             RowBox[{"i", "+", "70"}]}], "]"}], "]"}], "]"}]}], ","}], "]"}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Total", "[", 
          RowBox[{
           RowBox[{"ecgsqis", "[", 
            RowBox[{"[", "1", "]"}], "]"}], "[", 
           RowBox[{"[", 
            RowBox[{"i", ";;", 
             RowBox[{"i", "+", "70"}]}], "]"}], "]"}], "]"}], "<", 
         RowBox[{"Total", "[", 
          RowBox[{
           RowBox[{"ppgsqis", "[", 
            RowBox[{"[", "1", "]"}], "]"}], "[", 
           RowBox[{"[", 
            RowBox[{"i", ";;", 
             RowBox[{"i", "+", "70"}]}], "]"}], "]"}], "]"}]}], ",", 
        RowBox[{
         RowBox[{
          RowBox[{"RRfinal", "[", 
           RowBox[{"[", "1", "]"}], "]"}], "[", 
          RowBox[{"[", 
           RowBox[{"i", ";;", 
            RowBox[{"i", "+", "70"}]}], "]"}], "]"}], "=", 
         RowBox[{"N", "[", 
          RowBox[{
           RowBox[{"RR1", "[", 
            RowBox[{"[", "1", "]"}], "]"}], "[", 
           RowBox[{"[", 
            RowBox[{"i", ";;", 
             RowBox[{"i", "+", "70"}]}], "]"}], "]"}], "]"}]}], ","}], "]"}], 
      ";"}]}], "]"}], ";"}], " ", 
  RowBox[{"(*", 
   RowBox[{
   "storing", " ", "previously", " ", "calculated", " ", "heart", " ", 
    "rates", " ", "to", " ", "final", " ", "heart", " ", "rate", " ", 
    "depending", " ", "on", " ", "signal", " ", "quality"}], "*)"}], 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.752247388588479*^9, 3.7522474469704633`*^9}, {
   3.7522475393342695`*^9, 3.7522476832580967`*^9}, {3.7522477335132294`*^9, 
   3.752247753783101*^9}, 3.752247903781478*^9, {3.7522484324198675`*^9, 
   3.7522484556383467`*^9}, {3.752249613354267*^9, 3.752249632222701*^9}, {
   3.7522497084837785`*^9, 3.752249807009633*^9}, 3.752249840896294*^9, {
   3.7522502864997716`*^9, 3.752250455498274*^9}, {3.7522505211208*^9, 
   3.752250531029218*^9}, {3.752250736961792*^9, 3.7522507412462*^9}, {
   3.752250893433679*^9, 3.7522509349305534`*^9}, {3.7522511194321704`*^9, 
   3.7522511239717784`*^9}, {3.752253634456823*^9, 3.7522536576070786`*^9}, {
   3.752772677058676*^9, 3.752772679233692*^9}, 3.752774659006995*^9, {
   3.7527823204249387`*^9, 3.75278234376949*^9}},
 CellLabel->"In[84]:=",ExpressionUUID->"9b9f69d7-0df6-4ac6-ac71-cdfcb42e508c"],

Cell[BoxData[
 RowBox[{"(*", "Animating", "*)"}]], "Input",
 CellChangeTimes->{{3.7527823471399107`*^9, 
  3.752782352477741*^9}},ExpressionUUID->"22763f1e-1dec-460d-b3c3-\
fa1870369709"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Animate", "[", 
  RowBox[{
   RowBox[{"GraphicsRow", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"If", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"plotposition1", "[", 
            RowBox[{"[", "1", "]"}], "]"}], "[", 
           RowBox[{"[", "i", "]"}], "]"}], "\[NotEqual]", "0"}], ",", 
         RowBox[{"Show", "[", 
          RowBox[{
           RowBox[{"ListPlot", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"signalwindow1", "[", 
               RowBox[{"[", "i", "]"}], "]"}], "[", 
              RowBox[{"[", "All", "]"}], "]"}], ",", 
             RowBox[{"Joined", "\[Rule]", " ", "True"}], ",", 
             RowBox[{"PlotRange", "\[Rule]", " ", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"0", ",", "71"}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{"0", ",", "150"}], "}"}]}], "}"}]}], ",", 
             RowBox[{"PlotStyle", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{"Directive", "[", 
                RowBox[{"Green", ",", "Thick"}], "]"}], "}"}]}], ",", 
             RowBox[{"AxesStyle", "\[Rule]", 
              RowBox[{"Directive", "[", 
               RowBox[{"Black", ",", "12", ",", "Thick"}], "]"}]}]}], "]"}], 
           ",", 
           RowBox[{"ListPlot", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{
                 RowBox[{"plotposition1", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], "[", 
                 RowBox[{"[", "i", "]"}], "]"}], ",", 
                RowBox[{
                 RowBox[{"signalwindow1", "[", 
                  RowBox[{"[", "i", "]"}], "]"}], "[", 
                 RowBox[{"[", 
                  RowBox[{
                   RowBox[{"plotposition2", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "[", 
                   RowBox[{"[", "i", "]"}], "]"}], "]"}], "]"}]}], "}"}], 
              "}"}], ",", 
             RowBox[{"PlotMarkers", "\[Rule]", 
              RowBox[{"Graphics", "[", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"Red", ",", 
                  RowBox[{"Circle", "[", "]"}]}], "}"}], ",", 
                RowBox[{"ImageSize", "\[Rule]", "10"}]}], "]"}]}]}], "]"}], 
           ",", 
           RowBox[{"Graphics", "[", 
            RowBox[{"Text", "[", 
             RowBox[{
              RowBox[{"\"\<Heartrate = \>\"", "<>", 
               RowBox[{"ToString", "@", 
                RowBox[{"N", "[", 
                 RowBox[{
                  RowBox[{"RR1", "[", 
                   RowBox[{"[", "1", "]"}], "]"}], "[", 
                  RowBox[{"[", "i", "]"}], "]"}], "]"}]}], "<>", 
               "\"\<bpm\>\""}], ",", 
              RowBox[{"{", 
               RowBox[{"55", ",", "40"}], "}"}], ",", 
              RowBox[{"BaseStyle", "\[Rule]", " ", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"FontWeight", "\[Rule]", "\"\<Bold\>\""}], ",", 
                 RowBox[{"FontSize", "\[Rule]", "12"}]}], "}"}]}]}], "]"}], 
            "]"}]}], "]"}], ",", 
         RowBox[{"Show", "[", 
          RowBox[{
           RowBox[{"ListPlot", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"signalwindow1", "[", 
               RowBox[{"[", "i", "]"}], "]"}], "[", 
              RowBox[{"[", "All", "]"}], "]"}], ",", 
             RowBox[{"Joined", "\[Rule]", " ", "True"}], ",", 
             RowBox[{"PlotRange", "\[Rule]", " ", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"0", ",", "71"}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{"0", ",", "150"}], "}"}]}], "}"}]}], ",", 
             RowBox[{"PlotStyle", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{"Directive", "[", 
                RowBox[{"Green", ",", "Thick"}], "]"}], "}"}]}], ",", 
             RowBox[{"AxesStyle", "\[Rule]", 
              RowBox[{"Directive", "[", 
               RowBox[{"Black", ",", "12", ",", "Thick"}], "]"}]}]}], "]"}], 
           ",", 
           RowBox[{"Graphics", "[", 
            RowBox[{"Text", "[", 
             RowBox[{
              RowBox[{"\"\<Heartrate = \>\"", "<>", 
               RowBox[{"ToString", "@", 
                RowBox[{"N", "[", 
                 RowBox[{
                  RowBox[{"RR1", "[", 
                   RowBox[{"[", "1", "]"}], "]"}], "[", 
                  RowBox[{"[", "i", "]"}], "]"}], "]"}]}], "<>", 
               "\"\<bpm\>\""}], ",", 
              RowBox[{"{", 
               RowBox[{"55", ",", "40"}], "}"}], ",", 
              RowBox[{"BaseStyle", "\[Rule]", " ", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"FontWeight", "\[Rule]", "\"\<Bold\>\""}], ",", 
                 RowBox[{"FontSize", "\[Rule]", "12"}]}], "}"}]}]}], "]"}], 
            "]"}]}], "]"}]}], "]"}], ",", 
       RowBox[{"If", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"plotposition2", "[", 
            RowBox[{"[", "1", "]"}], "]"}], "[", 
           RowBox[{"[", "i", "]"}], "]"}], "\[NotEqual]", "0"}], ",", 
         RowBox[{"Show", "[", 
          RowBox[{
           RowBox[{"ListPlot", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"signalwindow2", "[", 
               RowBox[{"[", "i", "]"}], "]"}], "[", 
              RowBox[{"[", "All", "]"}], "]"}], ",", 
             RowBox[{"Joined", "\[Rule]", " ", "True"}], ",", 
             RowBox[{"PlotRange", "\[Rule]", " ", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"0", ",", "71"}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"-", "150"}], ",", "40"}], "}"}]}], "}"}]}], ",", 
             RowBox[{"PlotStyle", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{"Directive", "[", 
                RowBox[{"Green", ",", "Thick"}], "]"}], "}"}]}], ",", 
             RowBox[{"AxesStyle", "\[Rule]", 
              RowBox[{"Directive", "[", 
               RowBox[{"Black", ",", "12", ",", "Thick"}], "]"}]}]}], "]"}], 
           ",", 
           RowBox[{"ListPlot", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{
                 RowBox[{"plotposition2", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], "[", 
                 RowBox[{"[", "i", "]"}], "]"}], ",", 
                RowBox[{
                 RowBox[{"signalwindow2", "[", 
                  RowBox[{"[", "i", "]"}], "]"}], "[", 
                 RowBox[{"[", 
                  RowBox[{
                   RowBox[{"plotposition2", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "[", 
                   RowBox[{"[", "i", "]"}], "]"}], "]"}], "]"}]}], "}"}], 
              "}"}], ",", 
             RowBox[{"PlotMarkers", "\[Rule]", 
              RowBox[{"Graphics", "[", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"Red", ",", 
                  RowBox[{"Circle", "[", "]"}]}], "}"}], ",", 
                RowBox[{"ImageSize", "\[Rule]", "10"}]}], "]"}]}]}], "]"}], 
           ",", 
           RowBox[{"Graphics", "[", 
            RowBox[{"Text", "[", 
             RowBox[{
              RowBox[{"\"\<Heartrate = \>\"", "<>", 
               RowBox[{"ToString", "@", 
                RowBox[{"N", "[", 
                 RowBox[{
                  RowBox[{"RR2", "[", 
                   RowBox[{"[", "1", "]"}], "]"}], "[", 
                  RowBox[{"[", "i", "]"}], "]"}], "]"}]}], "<>", 
               "\"\< bpm\>\""}], ",", 
              RowBox[{"{", 
               RowBox[{"55", ",", 
                RowBox[{"-", "70"}]}], "}"}], ",", 
              RowBox[{"BaseStyle", "\[Rule]", " ", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"FontWeight", "\[Rule]", "\"\<Bold\>\""}], ",", 
                 RowBox[{"FontSize", "\[Rule]", "12"}]}], "}"}]}]}], "]"}], 
            "]"}]}], "]"}], ",", 
         RowBox[{"Show", "[", 
          RowBox[{
           RowBox[{"ListPlot", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"signalwindow2", "[", 
               RowBox[{"[", "i", "]"}], "]"}], "[", 
              RowBox[{"[", "All", "]"}], "]"}], ",", 
             RowBox[{"Joined", "\[Rule]", " ", "True"}], ",", 
             RowBox[{"PlotRange", "\[Rule]", " ", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"0", ",", "71"}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"-", "150"}], ",", "40"}], "}"}]}], "}"}]}], ",", 
             RowBox[{"PlotStyle", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{"Directive", "[", 
                RowBox[{"Green", ",", "Thick"}], "]"}], "}"}]}], ",", 
             RowBox[{"AxesStyle", "\[Rule]", 
              RowBox[{"Directive", "[", 
               RowBox[{"Black", ",", "12", ",", "Thick"}], "]"}]}]}], "]"}], 
           ",", 
           RowBox[{"Graphics", "[", 
            RowBox[{"Text", "[", 
             RowBox[{
              RowBox[{"\"\<Heartrate = \>\"", "<>", 
               RowBox[{"ToString", "@", 
                RowBox[{"N", "[", 
                 RowBox[{
                  RowBox[{"RR2", "[", 
                   RowBox[{"[", "1", "]"}], "]"}], "[", 
                  RowBox[{"[", "i", "]"}], "]"}], "]"}]}], "<>", 
               "\"\< bpm\>\""}], ",", 
              RowBox[{"{", 
               RowBox[{"55", ",", 
                RowBox[{"-", "70"}]}], "}"}], ",", 
              RowBox[{"BaseStyle", "\[Rule]", " ", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"FontWeight", "\[Rule]", "\"\<Bold\>\""}], ",", 
                 RowBox[{"FontSize", "\[Rule]", "12"}]}], "}"}]}]}], "]"}], 
            "]"}]}], "]"}]}], "]"}], ",", 
       RowBox[{"Graphics", "[", 
        RowBox[{"Text", "[", 
         RowBox[{
          RowBox[{"\"\<Heartrate = \>\"", "<>", 
           RowBox[{"ToString", "@", 
            RowBox[{"N", "[", 
             RowBox[{
              RowBox[{"RRfinal", "[", 
               RowBox[{"[", "1", "]"}], "]"}], "[", 
              RowBox[{"[", "i", "]"}], "]"}], "]"}]}], "<>", "\"\< bpm\>\""}],
           ",", 
          RowBox[{"{", 
           RowBox[{"55", ",", 
            RowBox[{"-", "70"}]}], "}"}], ",", 
          RowBox[{"BaseStyle", "\[Rule]", " ", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"FontWeight", "\[Rule]", "\"\<Bold\>\""}], ",", 
             RowBox[{"FontSize", "\[Rule]", "20"}]}], "}"}]}]}], "]"}], 
        "]"}]}], "}"}], ",", "100", ",", 
     RowBox[{"Frame", "\[Rule]", " ", "All"}], ",", 
     RowBox[{"ImageSize", "\[Rule]", " ", 
      RowBox[{"{", 
       RowBox[{"1300", ",", "400"}], "}"}]}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", "1", ",", 
     RowBox[{
      RowBox[{"Length", "[", "signalwindow1", "]"}], "-", "71"}], ",", "1", 
     ",", 
     RowBox[{"AnimationRate", "\[Rule]", "35"}], ",", 
     RowBox[{"Appearance", "\[Rule]", "\"\<Open\>\""}]}], "}"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.7522522748436785`*^9, 3.752252380681105*^9}, {
  3.7522524186417828`*^9, 3.752252440349822*^9}, {3.7522525654326057`*^9, 
  3.7522525737654257`*^9}, {3.752252705895507*^9, 3.7522527339259586`*^9}, {
  3.7522527841658535`*^9, 3.752252802060292*^9}, {3.752252879690055*^9, 
  3.752252883338263*^9}, {3.7522529347783556`*^9, 3.752252967956415*^9}, {
  3.752253026003495*^9, 3.7522530742701955`*^9}, {3.75232452826409*^9, 
  3.752324529512092*^9}, {3.752772716569731*^9, 3.7527728223655405`*^9}},
 CellLabel->"In[85]:=",ExpressionUUID->"57286fba-993d-4f9a-96e0-c4dc172e24fc"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`i$$ = 15089, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[$CellContext`i$$], 1, 34567, 1}}, Typeset`size$$ = {
    1560., {237., 243.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = True}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`i$$ = 1}, 
      "ControllerVariables" :> {}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> GraphicsRow[{
         If[Part[
            Part[$CellContext`plotposition1, 1], $CellContext`i$$] != 0, 
          Show[
           ListPlot[
            Part[
             Part[$CellContext`signalwindow1, $CellContext`i$$], All], Joined -> 
            True, PlotRange -> {{0, 71}, {0, 150}}, PlotStyle -> {
              Directive[Green, Thick]}, AxesStyle -> 
            Directive[Black, 12, Thick]], 
           ListPlot[{{
              Part[
               Part[$CellContext`plotposition1, 1], $CellContext`i$$], 
              Part[
               Part[$CellContext`signalwindow1, $CellContext`i$$], 
               Part[
                Part[$CellContext`plotposition2, 1], $CellContext`i$$]]}}, 
            PlotMarkers -> Graphics[{Red, 
               Circle[]}, ImageSize -> 10]], 
           Graphics[
            Text[
             StringJoin["Heartrate = ", 
              ToString[
               N[
                Part[
                 Part[$CellContext`RR1, 1], $CellContext`i$$]]], "bpm"], {55, 
             40}, BaseStyle -> {FontWeight -> "Bold", FontSize -> 12}]]], 
          Show[
           ListPlot[
            Part[
             Part[$CellContext`signalwindow1, $CellContext`i$$], All], Joined -> 
            True, PlotRange -> {{0, 71}, {0, 150}}, PlotStyle -> {
              Directive[Green, Thick]}, AxesStyle -> 
            Directive[Black, 12, Thick]], 
           Graphics[
            Text[
             StringJoin["Heartrate = ", 
              ToString[
               N[
                Part[
                 Part[$CellContext`RR1, 1], $CellContext`i$$]]], "bpm"], {55, 
             40}, BaseStyle -> {FontWeight -> "Bold", FontSize -> 12}]]]], 
         If[Part[
            Part[$CellContext`plotposition2, 1], $CellContext`i$$] != 0, 
          Show[
           ListPlot[
            Part[
             Part[$CellContext`signalwindow2, $CellContext`i$$], All], Joined -> 
            True, PlotRange -> {{0, 71}, {-150, 40}}, PlotStyle -> {
              Directive[Green, Thick]}, AxesStyle -> 
            Directive[Black, 12, Thick]], 
           ListPlot[{{
              Part[
               Part[$CellContext`plotposition2, 1], $CellContext`i$$], 
              Part[
               Part[$CellContext`signalwindow2, $CellContext`i$$], 
               Part[
                Part[$CellContext`plotposition2, 1], $CellContext`i$$]]}}, 
            PlotMarkers -> Graphics[{Red, 
               Circle[]}, ImageSize -> 10]], 
           Graphics[
            Text[
             StringJoin["Heartrate = ", 
              ToString[
               N[
                Part[
                 Part[$CellContext`RR2, 1], $CellContext`i$$]]], " bpm"], {
             55, -70}, BaseStyle -> {FontWeight -> "Bold", FontSize -> 12}]]], 
          Show[
           ListPlot[
            Part[
             Part[$CellContext`signalwindow2, $CellContext`i$$], All], Joined -> 
            True, PlotRange -> {{0, 71}, {-150, 40}}, PlotStyle -> {
              Directive[Green, Thick]}, AxesStyle -> 
            Directive[Black, 12, Thick]], 
           Graphics[
            Text[
             StringJoin["Heartrate = ", 
              ToString[
               N[
                Part[
                 Part[$CellContext`RR2, 1], $CellContext`i$$]]], " bpm"], {
             55, -70}, 
             BaseStyle -> {FontWeight -> "Bold", FontSize -> 12}]]]], 
         Graphics[
          Text[
           StringJoin["Heartrate = ", 
            ToString[
             N[
              Part[
               Part[$CellContext`RRfinal, 1], $CellContext`i$$]]], " bpm"], {
           55, -70}, BaseStyle -> {FontWeight -> "Bold", FontSize -> 20}]]}, 
        100, Frame -> All, ImageSize -> {1300, 400}], 
      "Specifications" :> {{$CellContext`i$$, 1, 34567, 1, AnimationRate -> 
         35, Appearance -> "Open", 
         AppearanceElements -> {
          "ProgressSlider", "PlayPauseButton", "FasterSlowerButtons", 
           "DirectionButton"}}}, 
      "Options" :> {
       ControlType -> Animator, AppearanceElements -> None, DefaultBaseStyle -> 
        "Animate", DefaultLabelStyle -> "AnimateLabel", SynchronousUpdating -> 
        True, ShrinkingDelay -> 10.}, "DefaultOptions" :> {}],
     ImageSizeCache->{1617., {282., 289.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Animate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{
  3.7522527360651627`*^9, 3.7522528047263017`*^9, 3.752252892886881*^9, {
   3.7522529576533966`*^9, 3.7522529698148184`*^9}, {3.752253030545103*^9, 
   3.752253075458798*^9}, 3.752324531212495*^9, 3.752774678844551*^9, 
   3.7529101035829268`*^9, 3.816865115619006*^9},
 CellLabel->"Out[85]=",ExpressionUUID->"8672e54b-7376-4fbf-89e3-81912009c981"]
}, Open  ]],

Cell["\<\
To conclude, even detection using SVM works quite well but the challenge of \
finding an optimal classifier with the perfect balance between sensitivity \
and specificity is yet to be explored.\
\>", "Text",
 CellChangeTimes->{{3.752783090598507*^9, 
  3.7527831514258685`*^9}},ExpressionUUID->"576baccc-595b-4501-9c8b-\
18fb63ee75c2"]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1920, 997},
WindowMargins->{{-8, Automatic}, {Automatic, -8}},
TaggingRules->{
 "PresenterSettings" -> {
   "ShowToolbar" -> True, "SlideBreakStyles" -> {}, "ShowSlideBreaks" -> True,
     "Dialogs" -> {}}},
Magnification:>1.2 Inherited,
FrontEndVersion->"12.1 for Microsoft Windows (64-bit) (June 19, 2020)",
StyleDefinitions->Notebook[{
   Cell[
    StyleData[
    StyleDefinitions -> 
     FrontEnd`FileName[{"PresenterTools"}, "Facet.nb", CharacterEncoding -> 
       "UTF-8"]]], 
   Cell[
    StyleData["Text"], FontColor -> 
    RGBColor[0.25882352941176473`, 0.32941176470588235`, 
      0.1803921568627451]]}, Visible -> False, FrontEndVersion -> 
  "12.1 for Microsoft Windows (64-bit) (June 19, 2020)", StyleDefinitions -> 
  "PrivateStylesheetFormatting.nb"],
ExpressionUUID->"6a06c64f-739e-48e8-8d10-23581028ad37"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 1711, 51, 266, "Title",ExpressionUUID->"efeea883-35c4-4b1a-9b54-923a13693dd5"],
Cell[CellGroupData[{
Cell[2316, 77, 330, 5, 74, "Section",ExpressionUUID->"fedb9b32-8807-46ef-ae30-ee51c0f5a3ad"],
Cell[CellGroupData[{
Cell[2671, 86, 153, 3, 55, "Subsection",ExpressionUUID->"96e29293-babb-42e8-9910-1dd74d057cd2"],
Cell[2827, 91, 2302, 35, 294, "Text",ExpressionUUID->"5878b5b9-c8bb-49bc-94b9-0041fb52fe90"]
}, Open  ]],
Cell[CellGroupData[{
Cell[5166, 131, 168, 3, 55, "Subsection",ExpressionUUID->"8fb96e59-2c4d-405d-a4f0-4b00093a6f89"],
Cell[5337, 136, 26986, 458, 359, "Text",ExpressionUUID->"b25beb81-a560-4561-bdd3-dcde54f68e22"],
Cell[32326, 596, 4903, 104, 228, "Input",ExpressionUUID->"988f6582-41f2-409c-a0a8-7db71609c10e"],
Cell[37232, 702, 547, 11, 38, "Text",ExpressionUUID->"d9ad6a71-ad95-4007-8868-77777f250681"],
Cell[37782, 715, 3865, 91, 204, "Input",ExpressionUUID->"e7f8df79-dd5b-4f51-9739-a26d3ae43988"]
}, Open  ]],
Cell[CellGroupData[{
Cell[41684, 811, 174, 3, 55, "Subsection",ExpressionUUID->"b7374c39-f1b7-4baa-96af-5d772c48a95a"],
Cell[41861, 816, 28352, 477, 335, "Text",ExpressionUUID->"5eb3e897-8cfc-4195-9664-5e00d790c0c1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[70250, 1298, 168, 3, 55, "Subsection",ExpressionUUID->"f51011b5-ab07-492f-b82c-364ee23667f0"],
Cell[70421, 1303, 1088, 20, 90, "Text",ExpressionUUID->"3e40489b-fc34-4b9e-85d0-185c9527c9ae"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[71558, 1329, 205, 3, 74, "Section",ExpressionUUID->"c9bb8fb3-75a6-438b-90dd-0228c0fabe02"],
Cell[71766, 1334, 1183, 19, 115, "Text",ExpressionUUID->"01cdf2eb-8fd0-4cb4-81da-1ed16ce85b83"],
Cell[72952, 1355, 157432, 2586, 275, "Input",ExpressionUUID->"b7c44f66-758f-4530-ab29-357c320b824d"],
Cell[230387, 3943, 172, 3, 38, "Text",ExpressionUUID->"2ba2d9e1-29da-4d4e-a00d-60e3fa11530b"],
Cell[230562, 3948, 720, 16, 35, "Input",ExpressionUUID->"5b1162b0-0268-49dd-8266-abe72e19733e"],
Cell[231285, 3966, 236, 6, 38, "Text",ExpressionUUID->"9e9a0df0-4a41-4bff-ba59-b049c62aa52e"],
Cell[231524, 3974, 399, 10, 35, "Input",ExpressionUUID->"4a2f5b39-952f-4f56-9a3f-023181c88449"],
Cell[231926, 3986, 446, 13, 35, "Input",ExpressionUUID->"5e3870f9-b2ac-4f52-816a-86b5a7ea4edd"],
Cell[232375, 4001, 175, 3, 38, "Text",ExpressionUUID->"69bfb3e5-813c-43da-8ec8-8fa57488f26c"],
Cell[232553, 4006, 591, 10, 35, "Input",ExpressionUUID->"7cc7591d-58d9-4d51-9ec7-d2bbae635e24"],
Cell[233147, 4018, 213, 5, 38, "Text",ExpressionUUID->"cc5c08f3-efc2-452c-815b-d5a05351423f"],
Cell[233363, 4025, 719, 14, 35, "Input",ExpressionUUID->"1f00d579-5c1f-4d32-afad-8336452404fc"],
Cell[234085, 4041, 597, 13, 35, "Input",ExpressionUUID->"3dda273d-3ad3-40e2-956c-548def14c590"],
Cell[234685, 4056, 656, 16, 35, "Input",ExpressionUUID->"829ded47-8c26-4a5d-abc1-114455d57e7a"],
Cell[235344, 4074, 298, 9, 38, "Text",ExpressionUUID->"e1aa52a0-9904-4fb3-a215-c15b7860b652"],
Cell[235645, 4085, 338, 7, 35, "Input",ExpressionUUID->"9f9a3787-0795-4a67-8aab-2bdaa6040e0f"],
Cell[235986, 4094, 345, 9, 38, "Text",ExpressionUUID->"1260ff61-c3c4-4af8-89b4-3b035786a03d"],
Cell[236334, 4105, 436, 8, 35, "Input",ExpressionUUID->"145d422e-a2bd-40c0-954d-bd29d67e34fb"],
Cell[236773, 4115, 191, 3, 38, "Text",ExpressionUUID->"94c7db21-5505-47c7-8486-7eff9d937dd6"],
Cell[236967, 4120, 412, 10, 35, "Input",ExpressionUUID->"213080ca-63a7-4f2a-b9fd-d871ad3079cc"],
Cell[237382, 4132, 428, 10, 35, "Input",ExpressionUUID->"a6466029-0956-4819-ac35-8832a7eccd38"],
Cell[237813, 4144, 270, 6, 35, "Input",ExpressionUUID->"1009325c-cb07-4316-ba48-2ce4f2da5a93"],
Cell[238086, 4152, 355, 7, 38, "Text",ExpressionUUID->"fd202023-693d-4ca0-8560-10b1020170e9"],
Cell[238444, 4161, 884, 19, 35, "Input",ExpressionUUID->"d3dbf2d9-646c-4493-b58f-a14a4be6f727"],
Cell[239331, 4182, 816, 18, 35, "Input",ExpressionUUID->"998665d5-9c6d-4e1c-8ce3-36be80e10d72"],
Cell[240150, 4202, 788, 18, 35, "Input",ExpressionUUID->"f6ecea80-b5c9-4f63-80d9-fc8ca7a5b22f"],
Cell[240941, 4222, 808, 18, 35, "Input",ExpressionUUID->"6ee66848-c09d-4e81-9794-c2ea2952a3b4"],
Cell[241752, 4242, 558, 10, 64, "Text",ExpressionUUID->"22f2ae2d-1db7-49fb-8acf-f0a68a5d208c"],
Cell[242313, 4254, 2125, 36, 60, "Input",ExpressionUUID->"8046ecb0-5f6b-430a-ac18-84bef4213917"],
Cell[244441, 4292, 740, 15, 35, "Input",ExpressionUUID->"c0476b38-627b-4dcd-8e28-3914d5b66021"],
Cell[245184, 4309, 650, 13, 64, "Text",ExpressionUUID->"1fc8bccb-7058-48a7-8c7d-3df520dc95b3"],
Cell[245837, 4324, 9881, 231, 588, "Input",ExpressionUUID->"69785ee8-db12-4c0c-b6c5-bf91130e464b"],
Cell[255721, 4557, 367, 8, 35, "Input",ExpressionUUID->"37d372b5-1678-49fd-8e3a-e98ebf4cdcd1"],
Cell[256091, 4567, 505, 11, 38, "Text",ExpressionUUID->"1a4dcd1b-21b1-44d8-ac0a-cb73b76782ed"],
Cell[256599, 4580, 3759, 87, 372, "Input",ExpressionUUID->"a606b066-2d73-4839-aa5d-ed7240eb02a0"],
Cell[CellGroupData[{
Cell[260383, 4671, 546, 11, 35, "Input",ExpressionUUID->"49e62f4f-8c83-42f0-a6f5-6b4de7311b97"],
Cell[260932, 4684, 592, 12, 39, "Output",ExpressionUUID->"2637a4e6-0454-41ff-a059-41bd7851e3a0"]
}, Open  ]],
Cell[261539, 4699, 1090, 17, 90, "Text",ExpressionUUID->"04b2928f-26d0-406f-b3de-d445ede9f574"],
Cell[262632, 4718, 828, 18, 35, "Input",ExpressionUUID->"05a870cc-c796-4dd7-b115-d1cba8e74ba1"],
Cell[263463, 4738, 500, 12, 35, "Input",ExpressionUUID->"8efcff32-7220-445c-8e53-1b9be745041f"],
Cell[263966, 4752, 365, 7, 35, "Input",ExpressionUUID->"529ab89b-e9ca-4f28-9f12-4d460c36c7d7"],
Cell[264334, 4761, 606, 14, 35, "Input",ExpressionUUID->"3aff787a-a9f8-477d-ab77-81c5f94ecddb"],
Cell[264943, 4777, 377, 8, 35, "Input",ExpressionUUID->"1d6a7a64-2538-4e4d-9ae9-f7db220e711d"],
Cell[265323, 4787, 916, 21, 35, "Input",ExpressionUUID->"6248a822-4cb1-4a1e-9972-075fbdd89a58"],
Cell[266242, 4810, 780, 18, 35, "Input",ExpressionUUID->"14184a4a-1808-43a8-9072-802a45fcf46a"],
Cell[267025, 4830, 693, 17, 35, "Input",ExpressionUUID->"0a0d012e-dd7b-4f34-9960-3705b3ee72fb"],
Cell[267721, 4849, 790, 19, 35, "Input",ExpressionUUID->"e867681d-b0b8-4332-b62d-83d5af7e6265"],
Cell[268514, 4870, 206, 3, 38, "Text",ExpressionUUID->"2f964c36-0e0f-4ad0-8d92-cbad06cbf489"],
Cell[268723, 4875, 4788, 118, 228, "Input",ExpressionUUID->"177af851-9a89-43f5-9ed9-984c28a4051e"],
Cell[273514, 4995, 342, 7, 38, "Text",ExpressionUUID->"0dc7dce8-ebb9-49b3-9fba-264eb20ce937"],
Cell[CellGroupData[{
Cell[273881, 5006, 5883, 141, 180, "Input",ExpressionUUID->"5bc6fbd8-9e7a-49f5-a61f-62f32fdaea65"],
Cell[279767, 5149, 4224, 89, 383, "Output",ExpressionUUID->"9b0e17cb-c793-4cf0-a1f5-a03a95275d7f"]
}, Open  ]],
Cell[284006, 5241, 181, 7, 90, "Text",ExpressionUUID->"b1e4a781-c143-4ae9-aa33-36ffb4258b72"]
}, Open  ]],
Cell[CellGroupData[{
Cell[284224, 5253, 204, 3, 74, "Section",ExpressionUUID->"306eb2e9-91f6-41e9-81a8-416945f1f9ce"],
Cell[284431, 5258, 1006, 16, 90, "Text",ExpressionUUID->"494c664c-ef7b-4346-9e6c-d5389d15d3f8"],
Cell[285440, 5276, 3383, 60, 252, "Input",ExpressionUUID->"eeb568fb-4ac2-4805-96fa-10ea558fc273"],
Cell[288826, 5338, 159, 3, 38, "Text",ExpressionUUID->"bd57cc26-cf07-48f4-bfda-446f1e3c286a"],
Cell[288988, 5343, 593, 12, 35, "Input",ExpressionUUID->"aeda376c-5259-4449-8d26-b6b56ce1b286"],
Cell[289584, 5357, 451, 11, 35, "Input",ExpressionUUID->"70b17543-c0e4-4bfb-84c2-8b26f123e371"],
Cell[290038, 5370, 520, 14, 35, "Input",ExpressionUUID->"02528e5b-da52-480c-a19c-a9a03893c44a"],
Cell[290561, 5386, 644, 11, 35, "Input",ExpressionUUID->"a2d09389-fae0-47e6-8d5b-a9bd4405abee"],
Cell[291208, 5399, 271, 6, 38, "Text",ExpressionUUID->"d9da7568-d079-4dc2-837f-bbb24b694642"],
Cell[291482, 5407, 673, 10, 35, "Input",ExpressionUUID->"e43725e6-c053-4b68-8c7c-df75f22da0e0"],
Cell[292158, 5419, 191, 3, 38, "Text",ExpressionUUID->"7df1814d-f0f0-4f54-9625-90599b8b2940"],
Cell[292352, 5424, 487, 9, 35, "Input",ExpressionUUID->"23187594-b63c-4a71-8c4d-daf9e342b80d"],
Cell[292842, 5435, 436, 10, 35, "Input",ExpressionUUID->"023ec8f2-cdec-462f-a47b-f9c255c01874"],
Cell[293281, 5447, 455, 10, 35, "Input",ExpressionUUID->"23d4ee94-4d9a-4070-a7f6-c05c420a56e9"],
Cell[293739, 5459, 274, 6, 35, "Input",ExpressionUUID->"67786274-f7c6-4e73-b885-bd94a292897c"],
Cell[294016, 5467, 911, 19, 35, "Input",ExpressionUUID->"8c874e01-54c7-44fa-b574-ac2dcad44d69"],
Cell[294930, 5488, 873, 19, 35, "Input",ExpressionUUID->"afe717e0-e997-4799-8779-80f3a82ec2ad"],
Cell[295806, 5509, 835, 18, 35, "Input",ExpressionUUID->"3807a84b-a0e6-4915-9758-ddea4d48e336"],
Cell[296644, 5529, 862, 19, 35, "Input",ExpressionUUID->"d7a4d289-69cd-40b5-a8d8-0846510842f6"],
Cell[297509, 5550, 225, 5, 38, "Text",ExpressionUUID->"366a17ec-08e6-41b8-aef1-97a4cc9a68ae"],
Cell[297737, 5557, 2259, 36, 35, "Input",ExpressionUUID->"82e59227-1e92-4d61-822b-21f6d21abc0e"],
Cell[299999, 5595, 566, 9, 35, "Input",ExpressionUUID->"f2388701-6c22-461e-9ebd-8797193ded50"],
Cell[300568, 5606, 416, 9, 35, "Input",ExpressionUUID->"df738b8d-cbe8-4645-b804-7e45564721cc"],
Cell[CellGroupData[{
Cell[301009, 5619, 418, 9, 35, "Input",ExpressionUUID->"db87b9ca-6431-4ac4-b6c5-9916c58616e4"],
Cell[301430, 5630, 425, 10, 39, "Output",ExpressionUUID->"dc3363b1-c907-447e-bb1b-d997c3473383"]
}, Open  ]],
Cell[301870, 5643, 779, 12, 64, "Text",ExpressionUUID->"13c63c64-5ce5-44dd-8b59-7611f371a356"],
Cell[302652, 5657, 747, 17, 35, "Input",ExpressionUUID->"62c56e60-05f5-41d9-9e48-fe570d844b41"],
Cell[303402, 5676, 446, 11, 35, "Input",ExpressionUUID->"a66601ae-a5b8-4b49-a4e8-8c388823a4e0"],
Cell[303851, 5689, 317, 6, 35, "Input",ExpressionUUID->"b0bcd5c0-4a84-495a-aed3-97e35033979c"],
Cell[304171, 5697, 563, 14, 35, "Input",ExpressionUUID->"22412fba-f807-4c79-ad7a-6a4f2cdb08e8"],
Cell[304737, 5713, 254, 5, 35, "Input",ExpressionUUID->"5b24983f-0ba4-411b-9f34-ccc8bc5e55a8"],
Cell[304994, 5720, 547, 13, 35, "Input",ExpressionUUID->"d5071f78-3437-4f22-a90e-0a48770b3f13"],
Cell[305544, 5735, 319, 7, 35, "Input",ExpressionUUID->"6837dd52-49ad-456d-89c3-e067cd4563c7"],
Cell[305866, 5744, 743, 18, 35, "Input",ExpressionUUID->"c94ae273-12b7-4b6f-8842-6c81d29a0c48"],
Cell[306612, 5764, 508, 12, 35, "Input",ExpressionUUID->"a9c4e7b1-d456-4e41-8e77-9ff117ea202a"],
Cell[307123, 5778, 493, 12, 35, "Input",ExpressionUUID->"8fd95c09-c095-437d-867c-77e4c4152653"],
Cell[307619, 5792, 206, 3, 38, "Text",ExpressionUUID->"7c97d67b-95ac-4b9c-a7df-23bf2acb104e"],
Cell[307828, 5797, 4768, 118, 228, "Input",ExpressionUUID->"bb05323c-338f-4225-bbd7-396dd92dfb4c"],
Cell[312599, 5917, 393, 8, 38, "Text",ExpressionUUID->"68b0af24-907d-4151-869e-9f2a30699d1f"],
Cell[CellGroupData[{
Cell[313017, 5929, 5945, 144, 204, "Input",ExpressionUUID->"77c19c47-e1b4-4456-af9d-6b74f43b708a"],
Cell[318965, 6075, 4215, 89, 365, "Output",ExpressionUUID->"5c33cdf4-ab81-47d1-889f-3decdf2842c5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[323217, 6169, 179, 3, 55, "Subsection",ExpressionUUID->"dc4d61a2-50f5-4855-8083-70460160715e"],
Cell[323399, 6174, 407, 8, 38, "Text",ExpressionUUID->"87179d77-adcb-47fb-a57b-c159f9eaf4f2"],
Cell[323809, 6184, 658, 17, 35, "Input",ExpressionUUID->"8512565c-a50f-431e-94ca-96703c043b12"],
Cell[324470, 6203, 153, 3, 35, "Input",ExpressionUUID->"98620198-bb2a-45c3-abe7-f6add7f7bac4"],
Cell[324626, 6208, 1000, 20, 35, "Input",ExpressionUUID->"834ed023-807c-493a-bd3c-863319445d1c"],
Cell[325629, 6230, 795, 20, 35, "Input",ExpressionUUID->"483830fd-e704-4f5f-ad9a-3531677b9bc0"],
Cell[326427, 6252, 479, 10, 35, "Input",ExpressionUUID->"2ed2297e-19cb-43a8-9de7-e2a176c69ab9"],
Cell[326909, 6264, 464, 9, 35, "Input",ExpressionUUID->"fe8f2f44-dc1a-4065-afca-50716cce816e"],
Cell[CellGroupData[{
Cell[327398, 6277, 469, 10, 35, "Input",ExpressionUUID->"ae21b30d-0fd8-4fc2-be36-76075a7eb989"],
Cell[327870, 6289, 492, 11, 39, "Output",ExpressionUUID->"fd3bc00f-1388-4cb2-b7c0-d910ef2dcbff"]
}, Open  ]],
Cell[328377, 6303, 734, 12, 64, "Text",ExpressionUUID->"24387ade-b33f-411a-a70e-d2631ef358ce"],
Cell[329114, 6317, 591, 13, 35, "Input",ExpressionUUID->"1c78ed37-d6d0-4cdd-a3c7-14ef697f949a"],
Cell[329708, 6332, 504, 12, 35, "Input",ExpressionUUID->"1423cf2c-e4fd-42b8-aea1-5f873f652604"],
Cell[330215, 6346, 492, 12, 35, "Input",ExpressionUUID->"30015487-4cc7-40be-b987-868217f0c7c4"],
Cell[330710, 6360, 613, 14, 35, "Input",ExpressionUUID->"deea0d21-f3ec-43e2-ac40-5ec11598e2dd"],
Cell[331326, 6376, 206, 3, 38, "Text",ExpressionUUID->"4dd2c08e-11cb-4292-b35a-198a6e1dfd56"],
Cell[331535, 6381, 6271, 152, 276, "Input",ExpressionUUID->"ef2effd1-db65-4b7c-9bef-07dfc7c2c398"],
Cell[CellGroupData[{
Cell[337831, 6537, 6100, 146, 204, "Input",ExpressionUUID->"1c40a511-8f30-41a7-a2de-325795d241ab"],
Cell[343934, 6685, 4496, 93, 365, "Output",ExpressionUUID->"1f623c14-bccb-4743-8651-a5a95433c13d"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[348491, 6785, 182, 3, 74, "Section",ExpressionUUID->"86e6d541-7efa-4fc3-acef-988d8c284672"],
Cell[348676, 6790, 727, 12, 90, "Text",ExpressionUUID->"a43597d8-ae47-4164-8172-b71ad510a89f"],
Cell[349406, 6804, 860, 18, 35, "Input",ExpressionUUID->"3c5340e2-7680-4452-851a-7583b723c231"],
Cell[350269, 6824, 451, 11, 35, "Input",ExpressionUUID->"f32490a7-913e-41b5-9192-20acfb7f0381"],
Cell[350723, 6837, 457, 12, 35, "Input",ExpressionUUID->"bebe100d-7979-4bdf-b895-a7c454b18359"],
Cell[351183, 6851, 742, 17, 35, "Input",ExpressionUUID->"c8551504-1575-4134-9efc-3e8d37a3e0f7"],
Cell[351928, 6870, 502, 12, 35, "Input",ExpressionUUID->"51dfa137-0c8b-4f59-9011-7cd9073099eb"],
Cell[352433, 6884, 455, 12, 35, "Input",ExpressionUUID->"d4de8968-45ae-41ee-9057-8a32ceaff000"],
Cell[352891, 6898, 556, 14, 35, "Input",ExpressionUUID->"bc769609-fed0-4979-8308-e81e642c33f2"],
Cell[353450, 6914, 3789, 96, 132, "Input",ExpressionUUID->"9b9f69d7-0df6-4ac6-ac71-cdfcb42e508c"],
Cell[357242, 7012, 187, 4, 35, "Input",ExpressionUUID->"22763f1e-1dec-460d-b3c3-fa1870369709"],
Cell[CellGroupData[{
Cell[357454, 7020, 12074, 288, 324, "Input",ExpressionUUID->"57286fba-993d-4f9a-96e0-c4dc172e24fc"],
Cell[369531, 7310, 5908, 135, 612, "Output",ExpressionUUID->"8672e54b-7376-4fbf-89e3-81912009c981"]
}, Open  ]],
Cell[375454, 7448, 345, 7, 38, "Text",ExpressionUUID->"576baccc-595b-4501-9c8b-18fb63ee75c2"]
}, Open  ]]
}, Open  ]]
}
]
*)

